<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Cci.CodeModelToIL</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Cci.CodeModelToILConverter">
            <summary>
            An object with a method that converts a given block of statements to a list of IL operations, exception information and possibly some private
            helper types.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.#ctor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.ISourceLocationProvider,Microsoft.Cci.Contracts.IContractProvider)">
            <summary>
            Initializes an object with a method that converts a given block of statements to a list of IL operations, exception information and possibly some private 
            helper types.
            </summary>
            <param name="host">An object representing the application that is hosting the converter. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.</param>
            <param name="sourceLocationProvider">An object that can map the ILocation objects found in the block of statements to IPrimarySourceLocation objects.  May be null.</param>
            <param name="contractProvider">An object that associates contracts, such as preconditions and postconditions, with methods, types and loops.
            IL to check this contracts will be generated along with IL to evaluate the block of statements. May be null.</param>
        </member>
        <member name="F:Microsoft.Cci.CodeModelToILConverter.host">
            <summary>
            An object representing the application that is hosting the converter. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.
            </summary>
        </member>
        <member name="F:Microsoft.Cci.CodeModelToILConverter.sourceLocationProvider">
            <summary>
            An object that can map the ILocation objects found in the block of statements to IPrimarySourceLocation objects.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IAddition)">
            <summary>
            Visits the specified addition.
            </summary>
            <param name="addition">The addition.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IAddressableExpression)">
            <summary>
            Visits the specified addressable expression.
            </summary>
            <param name="addressableExpression">The addressable expression.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IAddressDereference)">
            <summary>
            Visits the specified address dereference.
            </summary>
            <param name="addressDereference">The address dereference.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IAddressOf)">
            <summary>
            Visits the specified address of.
            </summary>
            <param name="addressOf">The address of.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IAliasForType)">
            <summary>
            Visits the specified alias for type.
            </summary>
            <param name="aliasForType">Type of the alias for.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IAnonymousDelegate)">
            <summary>
            Visits the specified anonymous delegate.
            </summary>
            <param name="anonymousDelegate">The anonymous delegate.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IArrayIndexer)">
            <summary>
            Visits the specified array indexer.
            </summary>
            <param name="arrayIndexer">The array indexer.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IArrayTypeReference)">
            <summary>
            Visits the specified array type reference.
            </summary>
            <param name="arrayTypeReference">The array type reference.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IAssembly)">
            <summary>
            Visits the specified assembly.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IAssemblyReference)">
            <summary>
            Visits the specified assembly reference.
            </summary>
            <param name="assemblyReference">The assembly reference.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IAssertStatement)">
            <summary>
            Visits the specified assert statement.
            </summary>
            <param name="assertStatement">The assert statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IAssignment)">
            <summary>
            Visits the specified assignment.
            </summary>
            <param name="assignment">The assignment.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.VisitAssignment(Microsoft.Cci.IAssignment,System.Boolean)">
            <summary>
            Visits the assignment.
            </summary>
            <param name="assignment">The assignment.</param>
            <param name="treatAsStatement">if set to <c>true</c> [treat as statement].</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IAssumeStatement)">
            <summary>
            Visits the specified assume statement.
            </summary>
            <param name="assumeStatement">The assume statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IBaseClassReference)">
            <summary>
            Visits the specified base class reference.
            </summary>
            <param name="baseClassReference">The base class reference.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IBitwiseAnd)">
            <summary>
            Visits the specified bitwise and.
            </summary>
            <param name="bitwiseAnd">The bitwise and.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IBitwiseOr)">
            <summary>
            Visits the specified bitwise or.
            </summary>
            <param name="bitwiseOr">The bitwise or.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IBlockExpression)">
            <summary>
            Visits the specified block expression.
            </summary>
            <param name="blockExpression">The block expression.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IBlockStatement)">
            <summary>
            Visits the specified block.
            </summary>
            <param name="block">The block.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IBoundExpression)">
            <summary>
            Performs some computation with the given bound expression.
            </summary>
            <param name="boundExpression"></param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IBreakStatement)">
            <summary>
            Visits the specified break statement.
            </summary>
            <param name="breakStatement">The break statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.ICastIfPossible)">
            <summary>
            Visits the specified cast if possible.
            </summary>
            <param name="castIfPossible">The cast if possible.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.ICatchClause)">
            <summary>
            Visits the specified catch clause.
            </summary>
            <param name="catchClause">The catch clause.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.ICheckIfInstance)">
            <summary>
            Visits the specified check if instance.
            </summary>
            <param name="checkIfInstance">The check if instance.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.ICompileTimeConstant)">
            <summary>
            Visits the specified constant.
            </summary>
            <param name="constant">The constant.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IConditional)">
            <summary>
            Visits the specified conditional.
            </summary>
            <param name="conditional">The conditional.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IConditionalStatement)">
            <summary>
            Visits the specified conditional statement.
            </summary>
            <param name="conditionalStatement">The conditional statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IContinueStatement)">
            <summary>
            Visits the specified continue statement.
            </summary>
            <param name="continueStatement">The continue statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IConversion)">
            <summary>
            Visits the specified conversion.
            </summary>
            <param name="conversion">The conversion.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.ICreateArray)">
            <summary>
            Visits the specified create array.
            </summary>
            <param name="createArray">The create array.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.ICreateDelegateInstance)">
            <summary>
            Visits the specified create delegate instance.
            </summary>
            <param name="createDelegateInstance">The create delegate instance.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.ICreateObjectInstance)">
            <summary>
            Visits the specified create object instance.
            </summary>
            <param name="createObjectInstance">The create object instance.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.ICustomAttribute)">
            <summary>
            Visits the specified custom attribute.
            </summary>
            <param name="customAttribute">The custom attribute.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.ICustomModifier)">
            <summary>
            Visits the specified custom modifier.
            </summary>
            <param name="customModifier">The custom modifier.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IDefaultValue)">
            <summary>
            Visits the specified default value.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IDebuggerBreakStatement)">
            <summary>
            Visits the specified debugger break statement.
            </summary>
            <param name="debuggerBreakStatement">The debugger break statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IDivision)">
            <summary>
            Visits the specified division.
            </summary>
            <param name="division">The division.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IDoUntilStatement)">
            <summary>
            Visits the specified do until statement.
            </summary>
            <param name="doUntilStatement">The do until statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IEmptyStatement)">
            <summary>
            Visits the specified empty statement.
            </summary>
            <param name="emptyStatement">The empty statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IEquality)">
            <summary>
            Visits the specified equality.
            </summary>
            <param name="equality">The equality.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IExclusiveOr)">
            <summary>
            Visits the specified exclusive or.
            </summary>
            <param name="exclusiveOr">The exclusive or.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IExpressionStatement)">
            <summary>
            Visits the specified expression statement.
            </summary>
            <param name="expressionStatement">The expression statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IForEachStatement)">
            <summary>
            Visits the specified for each statement.
            </summary>
            <param name="forEachStatement">For each statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IForStatement)">
            <summary>
            Visits the specified for statement.
            </summary>
            <param name="forStatement">For statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IGetTypeOfTypedReference)">
            <summary>
            Visits the specified get type of typed reference.
            </summary>
            <param name="getTypeOfTypedReference">The get type of typed reference.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IGetValueOfTypedReference)">
            <summary>
            Visits the specified get value of typed reference.
            </summary>
            <param name="getValueOfTypedReference">The get value of typed reference.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IGotoStatement)">
            <summary>
            Visits the specified goto statement.
            </summary>
            <param name="gotoStatement">The goto statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IGotoSwitchCaseStatement)">
            <summary>
            Visits the specified goto switch case statement.
            </summary>
            <param name="gotoSwitchCaseStatement">The goto switch case statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IGreaterThan)">
            <summary>
            Visits the specified greater than.
            </summary>
            <param name="greaterThan">The greater than.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IGreaterThanOrEqual)">
            <summary>
            Visits the specified greater than or equal.
            </summary>
            <param name="greaterThanOrEqual">The greater than or equal.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.ILabeledStatement)">
            <summary>
            Visits the specified labeled statement.
            </summary>
            <param name="labeledStatement">The labeled statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.ILeftShift)">
            <summary>
            Visits the specified left shift.
            </summary>
            <param name="leftShift">The left shift.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.ILessThan)">
            <summary>
            Visits the specified less than.
            </summary>
            <param name="lessThan">The less than.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.ILessThanOrEqual)">
            <summary>
            Visits the specified less than or equal.
            </summary>
            <param name="lessThanOrEqual">The less than or equal.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.ILocalDeclarationStatement)">
            <summary>
            Visits the specified local declaration statement.
            </summary>
            <param name="localDeclarationStatement">The local declaration statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.ILockStatement)">
            <summary>
            Visits the specified lock statement.
            </summary>
            <param name="lockStatement">The lock statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.ILogicalNot)">
            <summary>
            Visits the specified logical not.
            </summary>
            <param name="logicalNot">The logical not.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IMakeTypedReference)">
            <summary>
            Visits the specified make typed reference.
            </summary>
            <param name="makeTypedReference">The make typed reference.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IMethodCall)">
            <summary>
            Visits the specified method call.
            </summary>
            <param name="methodCall">The method call.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.Contracts.IMethodContract)">
            <summary>
            Traverses the given method contract.
            </summary>
            <param name="methodContract"></param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IModulus)">
            <summary>
            Visits the specified modulus.
            </summary>
            <param name="modulus">The modulus.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IMultiplication)">
            <summary>
            Visits the specified multiplication.
            </summary>
            <param name="multiplication">The multiplication.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.INotEquality)">
            <summary>
            Visits the specified not equality.
            </summary>
            <param name="notEquality">The not equality.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IOldValue)">
            <summary>
            Visits the specified old value.
            </summary>
            <param name="oldValue">The old value.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IOnesComplement)">
            <summary>
            Visits the specified ones complement.
            </summary>
            <param name="onesComplement">The ones complement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IOutArgument)">
            <summary>
            Visits the specified out argument.
            </summary>
            <param name="outArgument">The out argument.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IPointerCall)">
            <summary>
            Visits the specified pointer call.
            </summary>
            <param name="pointerCall">The pointer call.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.Contracts.IPostcondition)">
            <summary>
            Traverses the given postCondition.
            </summary>
            <param name="postCondition"></param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.Contracts.IPrecondition)">
            <summary>
            Traverses the given pre condition.
            </summary>
            <param name="precondition"></param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IRefArgument)">
            <summary>
            Visits the specified ref argument.
            </summary>
            <param name="refArgument">The ref argument.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IResourceUseStatement)">
            <summary>
            Visits the specified resource use statement.
            </summary>
            <param name="resourceUseStatement">The resource use statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IRethrowStatement)">
            <summary>
            Visits the specified rethrow statement.
            </summary>
            <param name="rethrowStatement">The rethrow statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IReturnStatement)">
            <summary>
            Visits the specified return statement.
            </summary>
            <param name="returnStatement">The return statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IReturnValue)">
            <summary>
            Performs some computation with the given return value expression.
            </summary>
            <param name="returnValue"></param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IRightShift)">
            <summary>
            Visits the specified right shift.
            </summary>
            <param name="rightShift">The right shift.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IRuntimeArgumentHandleExpression)">
            <summary>
            Visits the specified runtime argument handle expression.
            </summary>
            <param name="runtimeArgumentHandleExpression">The runtime argument handle expression.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.ISizeOf)">
            <summary>
            Visits the specified size of.
            </summary>
            <param name="sizeOf">The size of.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.ISourceMethodBody)">
            <summary>
            Visits the specified method body.
            </summary>
            <param name="methodBody">The method body.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IStackArrayCreate)">
            <summary>
            Visits the specified stack array create.
            </summary>
            <param name="stackArrayCreate">The stack array create.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IStatement)">
            <summary>
            Traverses the given statement.
            </summary>
            <param name="statement"></param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.ISubtraction)">
            <summary>
            Visits the specified subtraction.
            </summary>
            <param name="subtraction">The subtraction.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.ISwitchCase)">
            <summary>
            Visits the specified switch case.
            </summary>
            <param name="switchCase">The switch case.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.ISwitchStatement)">
            <summary>
            Visits the specified switch statement.
            </summary>
            <param name="switchStatement">The switch statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IThisReference)">
            <summary>
            Visits the specified this reference.
            </summary>
            <param name="thisReference">The this reference.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IThrowStatement)">
            <summary>
            Visits the specified throw statement.
            </summary>
            <param name="throwStatement">The throw statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.ITryCatchFinallyStatement)">
            <summary>
            Visits the specified try catch filter finally statement.
            </summary>
            <param name="tryCatchFilterFinallyStatement">The try catch filter finally statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.ITokenOf)">
            <summary>
            Visits the specified token of.
            </summary>
            <param name="tokenOf">The token of.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.ITypeOf)">
            <summary>
            Visits the specified type of.
            </summary>
            <param name="typeOf">The type of.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IUnaryNegation)">
            <summary>
            Visits the specified unary negation.
            </summary>
            <param name="unaryNegation">The unary negation.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IUnaryPlus)">
            <summary>
            Visits the specified unary plus.
            </summary>
            <param name="unaryPlus">The unary plus.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IVectorLength)">
            <summary>
            Visits the specified vector length.
            </summary>
            <param name="vectorLength">Length of the vector.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IWhileDoStatement)">
            <summary>
            Visits the specified while do statement.
            </summary>
            <param name="whileDoStatement">The while do statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IYieldBreakStatement)">
            <summary>
            Visits the specified yield break statement.
            </summary>
            <param name="yieldBreakStatement">The yield break statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.Visit(Microsoft.Cci.IYieldReturnStatement)">
            <summary>
            Visits the specified yield return statement.
            </summary>
            <param name="yieldReturnStatement">The yield return statement.</param>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.GetLocalVariables">
            <summary>
            Returns all of the local variables (including compiler generated temporary variables) that are local to the block
            of statements translated by this converter.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.GetOperations">
            <summary>
            Returns the IL operations that correspond to the statements that have been converted to IL by this converter.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.GetOperationExceptionInformation">
            <summary>
            Returns zero or more exception exception information blocks (information about handlers, filters and finally blocks)
            that correspond to try-catch-finally constructs that appear in the statements that have been converted to IL by this converter.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.GetPrivateHelperTypes">
            <summary>
            Returns zero or more types that are used to keep track of information needed to implement
            the statements that have been converted to IL by this converter. For example, any closure classes
            needed to compile anonymous delegate expressions (lambdas) will be returned by this method.
            </summary>
        </member>
        <member name="M:Microsoft.Cci.CodeModelToILConverter.ConvertToIL(Microsoft.Cci.IMethodDefinition,Microsoft.Cci.IBlockStatement)">
            <summary>
            Traverses the given block of statements in the context of the given method to produce a list of
            IL operations, exception information blocks (the locations of handlers, filters and finallies) and any private helper
            types (for example closure classes) that represent the semantics of the given block of statements.
            The results of the traversal can be retrieved via the GetOperations, GetOperationExceptionInformation
            and GetPrivateHelperTypes methods.
            </summary>
            <param name="method">A method that provides the context for a block of statments that are to be converted to IL.</param>
            <param name="body">A block of statements that are to be converted to IL.</param>
        </member>
        <member name="P:Microsoft.Cci.CodeModelToILConverter.MaximumStackSizeNeeded">
            <summary>
            The maximum number of stack slots that will be needed by an interpreter of the IL produced by this converter.
            </summary>
        </member>
    </members>
</doc>

.DATA 23	* string length
.SDATA "Arrays bounds violation"	* string constant
.DATA 19	* string length
.SDATA "Out of stack space "	* string constant
* BEGIN preamble
: LDC 4, 0(0)	* initialize ZEROREG to 0
: LD 5, 0(4)	* initialize SP to end of memory
: LDA 5, -1(5)	* subtract one to get the true SP
: LDA 6, 0(5)	* FP and SP start off the same
* END preamble
* BEGIN: load a bool value into ACC0
: LDC 0, 1(0)	* Load a boolean value into ACC0
* END: load a bool value into ACC0
: JEQ 0, 2(7)	* Jump to Load 1 if ACC0 == 0
: LDC 0, 0(0)	* Load 0 into ACC0
: LDA 7, 1(7)	* Jump over Load 1
: LDC 0, 1(0)	* Load 1 into ACC0
: JEQ 0, 4(7)	* Jump over the then stmts if false
* BEGIN: load an int constant
: LDC 0, 1(0)	* Load a constant into ACC0
* END: load an int constant
* BEGIN: write(s)
: OUT 0, 0, 0	* write out the int value in ACC0
: OUTNL 0, 0, 0	* dump out the newline
* END: write(s)
: LDA 7, 9(7)	* Jump over the rest of the if
* BEGIN: load a bool value into ACC0
: LDC 0, 0(0)	* Load a boolean value into ACC0
* END: load a bool value into ACC0
: JEQ 0, 2(7)	* Jump to Load 1 if ACC0 == 0
: LDC 0, 0(0)	* Load 0 into ACC0
: LDA 7, 1(7)	* Jump over Load 1
: LDC 0, 1(0)	* Load 1 into ACC0
: JEQ 0, 3(7)	* Jump over the then stmts if false
* BEGIN: load an int constant
: LDC 0, 2(0)	* Load a constant into ACC0
* END: load an int constant
* BEGIN: write(s)
: OUT 0, 0, 0	* write out the int value in ACC0
: OUTNL 0, 0, 0	* dump out the newline
* END: write(s)
* BEGIN: load an int constant
: LDC 0, 3(0)	* Load a constant into ACC0
* END: load an int constant
* BEGIN: write(s)
: OUT 0, 0, 0	* write out the int value in ACC0
: OUTNL 0, 0, 0	* dump out the newline
* END: write(s)
* BEGIN: load a bool value into ACC0
: LDC 0, 0(0)	* Load a boolean value into ACC0
* END: load a bool value into ACC0
: JEQ 0, 2(7)	* Jump to Load 1 if ACC0 == 0
: LDC 0, 0(0)	* Load 0 into ACC0
: LDA 7, 1(7)	* Jump over Load 1
: LDC 0, 1(0)	* Load 1 into ACC0
: JEQ 0, 4(7)	* Jump over the then stmts if false
* BEGIN: load an int constant
: LDC 0, 1(0)	* Load a constant into ACC0
* END: load an int constant
* BEGIN: write(s)
: OUT 0, 0, 0	* write out the int value in ACC0
: OUTNL 0, 0, 0	* dump out the newline
* END: write(s)
: LDA 7, 9(7)	* Jump over the rest of the if
* BEGIN: load a bool value into ACC0
: LDC 0, 1(0)	* Load a boolean value into ACC0
* END: load a bool value into ACC0
: JEQ 0, 2(7)	* Jump to Load 1 if ACC0 == 0
: LDC 0, 0(0)	* Load 0 into ACC0
: LDA 7, 1(7)	* Jump over Load 1
: LDC 0, 1(0)	* Load 1 into ACC0
: JEQ 0, 3(7)	* Jump over the then stmts if false
* BEGIN: load an int constant
: LDC 0, 2(0)	* Load a constant into ACC0
* END: load an int constant
* BEGIN: write(s)
: OUT 0, 0, 0	* write out the int value in ACC0
: OUTNL 0, 0, 0	* dump out the newline
* END: write(s)
* BEGIN: load an int constant
: LDC 0, 3(0)	* Load a constant into ACC0
* END: load an int constant
* BEGIN: write(s)
: OUT 0, 0, 0	* write out the int value in ACC0
: OUTNL 0, 0, 0	* dump out the newline
* END: write(s)
: HALT 0, 0, 0	* End of Program

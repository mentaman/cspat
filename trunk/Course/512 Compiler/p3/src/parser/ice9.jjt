 /**
 * JavaCC file
 */options{  JDK_VERSION = "1.5";  STATIC = true;  MULTI = true;  VISITOR = true;}PARSER_BEGIN(Ice9Parser)package parser;import type.*;import table.*;import java.util.*;import java.io.*;import parser.visitor.*;public class Ice9Parser{  public static boolean isDebug = false;  public static boolean isDebug2 = false;  public static boolean debugTable = false;  public static SymbolTable globalTable = new SymbolTable();  public static SymbolTable currentTable = new SymbolTable();  public static Stack < String > loopStack = new Stack < String > ();

  public static HashMap< String, Integer> stringTable = new HashMap< String, Integer>();

  public static void debug(String text)  {    if (isDebug)    {      System.out.println(text);    }  }  public static void debugTable(String text)  {    if (debugTable)    {      System.out.println(text);    }  }  public static void debug2(String text)  {    if (isDebug2)    {      System.out.println(text);    }  }  public static void debug()  {    System.out.println();  }  public static void main(String args []) throws ParseException, java.io.IOException  {    Ice9Parser parser = null;    try    {      //      parser = new Ice9Parser(new java.io.FileInputStream("test-suite/tests/test245.9"));      parser = new Ice9Parser(new java.io.FileInputStream("test.dat"));      //      parser = new Ice9Parser(System.in);      //      System.out.println("Reading from file " + "dice/test1.9");
      ASTprogram n = parser.program();      n.dump("");      //      CodeGenerationVisitor visitor = new CodeGenerationVisitor();
      CodeGenerationVisitor visitor = new CodeGenerationVisitor(globalTable,stringTable);      n.jjtAccept(visitor, null);      System.out.println("successfully");    }    //    catch (java.io.FileNotFoundException e)    //    {    //      System.out.println("Ice9 Parser:  File not found.");    //      return;    //    }    catch (TokenMgrError e)    {      //      System.out.println(e.getMessage());
      String message = e.getMessage();      int lineIndex = message.indexOf("line");      int commaIndex = message.indexOf(",");      int quoteIndex = message.indexOf("\"");      int lineNbr = Integer.parseInt(message.substring(lineIndex + 5, commaIndex));      String t = message.substring(quoteIndex + 1, message.length() - 1);      System.out.println("line " + lineNbr + ": illegal character (" + t + ")");    }    catch (TypeException e)    {      System.out.println(e.prettyMessage());      System.out.println(e.getMessage());      //      System.out.println(e.getMessage());
    }    catch (SymbolTableException e)    {      System.out.println(e.prettyMessage());      System.out.println(e.getMessage());    }    catch (ParseException e)    {      Token t = e.currentToken;      int line = t.next.beginLine;      String value = t.image;      if (value == null)      {        value = "";      }      System.out.println("line " + line + ": syntax error near " + value);      System.out.println(e.getMessage());    }    catch (Exception e)    {      e.printStackTrace();    }    catch (Error e)    {      e.printStackTrace();    }    finally    {      debugTable("debug table: " + currentTable.toString());    }    FileWriter fstream = new FileWriter("test.out");    BufferedWriter out = new BufferedWriter(fstream);    for (int i = 1; i <= 0; i++)    {      try      {        System.out.println("parsing " + "test-suite/tests/test" + i + ".9");        parser.ReInit(new java.io.FileInputStream("test-suite/tests/test" + i + ".9"));        parser.program();        System.out.println("successfully");        out.write("test " + i + " successful!\n");      }      catch (TokenMgrError e)      {        //      System.out.println(e.getMessage());
        String message = e.getMessage();        int lineIndex = message.indexOf("line");        int commaIndex = message.indexOf(",");        int quoteIndex = message.indexOf("\"");        int lineNbr = Integer.parseInt(message.substring(lineIndex + 5, commaIndex));        String t = message.substring(quoteIndex + 1, message.length() - 1);        System.out.println("line " + lineNbr + ": illegal character (" + t + ")");      }      catch (TypeException e)      {        System.out.println(e.prettyMessage());        System.out.println(e.getMessage());        //      System.out.println(e.getMessage());
      }      catch (SymbolTableException e)      {        System.out.println(e.prettyMessage());        System.out.println(e.getMessage());      }      catch (ParseException e)      {        Token t = e.currentToken;        int line = t.next.beginLine;        String value = t.image;        if (value == null)        {          value = "";        }        System.out.println("line " + line + ": syntax error near " + value);        System.out.println(e.getMessage());      }      catch (Exception e)      {        e.printStackTrace();      }      catch (Error e)      {        e.printStackTrace();      }    }    try    {      out.close();    }    catch (Exception e)    {}  }}PARSER_END(Ice9Parser)SKIP :{  " "| "\r"| "\t"| "\n"| "\r\n"}SPECIAL_TOKEN :{  < SINGLE_LINE_COMMENT :    "#" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    )? >}TOKEN :{  < VAR : "var" >| < PROC : "proc" >| < END : "end" >| < RETURN : "return" >| < READ : "read" >| < WRITE : "write" >| < WRITES : "writes" >| < FORWARD : "forward" >| < TYPE : "type" >| < RARROW : "->" >}TOKEN : /*if*/{  < IF : "if" >| < ELSE : "else" >| < FI : "fi" >| < LR : "[]" >}TOKEN : /*do*/{  < DO : "do" >| < OD : "od" >}TOKEN : /*fa*/{  < FA : "fa" >| < AF : "af" >| < TO : "to" >}TOKEN : /*stm*/{  < BREAK : "break" >| < EXIT : "exit" >}TOKEN :{  < TRUE : "true" >| < FALSE : "false" >}/*
id	-> [A-Za-z][A-Za-z0-9_]*
int	-> [0-9]+
string  -> "[^"\n]*" 		# double-quoted string: any char but " and \n
	-> '[^'\n]*'            # single-quoted string: any char but ' and \n
*/TOKEN : /* Three complex tokens */{  < ID :    < LETTER >    (      < LETTER >    | < UNDERSCORE >    | < DIGIT >    )* >| < INT : (< DIGIT >)+ >| < STRING :    "\"" (~[ "\"", "\n" ])* "\""  | "'" (~[ "'", "\n" ])* "'" >| < #DIGIT : [ "0"-"9" ] >| < #LETTER : [ "a"-"z", "A"-"Z" ] >| < #UNDERSCORE : "_" >}TOKEN : /* OPERATORS */{  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >| < MOD : "%" >| < EQUAL : "=" >| < NOTEQUAL : "!=" >| < GREATERTHAN : ">" >| < LESSTHAN : "<" >| < NOTLESSTHAN : ">=" >| < NOTGREATERTHAN : "<=" >}TOKEN :{  < COLON : ":" >| < ASSIGN : ":=" >| < COMMA : "," >| < LBRACE : "[" >| < RBRACE : "]" >| < LPAREN : "(" >| < RPAREN : ")" >| < QUESTION : "?" >| < SEMICOLON : ";" >}/*
program	-> {var|type|forward|proc} stms
*/ASTprogram program() :{  globalTable = new SymbolTable();  globalTable.isGlobal = true;  globalTable.parent = SymbolTable.buildInTable();  currentTable = globalTable;  Token end;  jjtThis.jjtSetValue(TypeRecord.voidType);}{  (    var()  | type()  | forward()  | proc()  )*  stms()  { //System.out.println("successfully!");
  }  end = < EOF >  {    List < String > forwardWOProcs = currentTable.getForwardsWithoutProc();    if (forwardWOProcs.size() > 0)    {      throw new TypeException(TypeError.FORWARD_WITHOUT_PROC, "These forward: " + forwardWOProcs + " has not proc definition.", end);    }    return jjtThis;  }}void tokenTest() :{  Token t;}{  t = < STRING >  {    debug("parsing string: " + t.image);  }  < EOF >}String typeid() :{  debug("in type id");  Token id;}{  id = < ID >  {    TypeRecord type = currentTable.lookupType(id, id.image);    jjtThis.jjtSetValue(type);    return id.image;  }}String op() :{  debug("in op");  Token t;}{  (    t = < PLUS >  | t = < MINUS >  | t = < MULTIPLY >  | t = < DIVIDE >  | t = < MOD >  )  {    return t.image;  }}/*idlist  -> id { ',' id}*/List < Token > idlist() :{  debug("in IdList");  List < Token > tokens = new ArrayList < Token > ();  Token current;}{  current = < ID >  {    tokens.add(current);  }  (    < COMMA > current = < ID >    {      tokens.add(current);    }  )*  {    return tokens;  }}/*
stms	-> stm { stm }		# there is at least one stm

stm	-> if | do | fa | 'break' ';' | 'exit' ';'
	-> 'return' ';'
	-> 'write' exp ';' | 'writes' exp ';'
	-> exp ';'		# any exp is valid
	-> ';'			# the "empty" statement
*/void stms() :{  jjtThis.jjtSetValue(TypeRecord.voidType);}{  (    stm()  )+}void stm() :{  jjtThis.jjtSetValue(TypeRecord.voidType);}{  otherstm()| ifstm()}void otherstm() :{  debug("in other");  TypeRecord returnType;  jjtThis.jjtSetValue(TypeRecord.voidType);}{  dostm()| fa()| break_stm()| exit_stm()| return_stm()| write_stm()| exp() < SEMICOLON > // any exp is valid
| < SEMICOLON > // the "empty" statement
}TypeRecord return_stm() :{  Token t;}{  t = < RETURN > < SEMICOLON >  {    jjtThis.jjtSetValue(TypeRecord.voidType);    return TypeRecord.voidType;  }}TypeRecord exit_stm() :{  Token t;}{  t = < EXIT > < SEMICOLON >  {    jjtThis.jjtSetValue(TypeRecord.voidType);    return TypeRecord.voidType;  }}TypeRecord break_stm() :{  Token t;}{  t = < BREAK >  {    if (loopStack.empty())    {      throw new TypeException(TypeError.WRONG_USAGE, "break is not allowed in the scopes without loop", t);    }  }  < SEMICOLON >  {    jjtThis.jjtSetValue(TypeRecord.voidType);    return TypeRecord.voidType;  }}void write_stm() :{  TypeRecord returnType;  Token write;}{  (    write = < WRITE >  | write = < WRITES >  )  returnType = noAssignExp()  {    if (TypeRecord.isArray(returnType))    {      throw new TypeException(TypeError.WRONG_TYPE, "array type not allowed", write);    }    if (returnType.equals(TypeRecord.boolType))    {      throw new TypeException(TypeError.WRONG_TYPE, "bool type not allowed", write);    }  }  < SEMICOLON >  {    jjtThis.setFirstToken(write);    jjtThis.jjtSetValue(TypeRecord.voidType);  }}/*
if	-> 'if' exp '->' stms { '[]' exp '->' stms } 'fi'
	-> 'if' exp '->' stms { '[]' exp '->' stms } '[]' 'else' '->' stms 'fi'
*/void ifstm() :{  debug("if()");  TypeRecord conditionType;  Token iftoken;  SymbolTable newScope;
  Token e;}{  iftoken = < IF > conditionType = noAssignExp()  {    debug2("type:" + conditionType);    if (!conditionType.equals(TypeRecord.boolType))    {      throw new TypeException(TypeError.WRONG_TYPE, "if condition must be bool", iftoken);    }  }  < RARROW >  {    newScope = new SymbolTable();    newScope.parent = currentTable;    currentTable = newScope;  }  stms()  {    currentTable = currentTable.parent;  }  (    LOOKAHEAD(2)    < LR > conditionType = noAssignExp()    {      if (!conditionType.equals(TypeRecord.boolType))      {        throw new TypeException(TypeError.WRONG_TYPE, "else if condition must be bool", iftoken);      }    }    < RARROW >    {
      jjtThis.hasElseIf = true;      newScope = new SymbolTable();      newScope.parent = currentTable;      currentTable = newScope;    }    stms()    {      currentTable = currentTable.parent;    }  )*  [    LOOKAHEAD(2)    < LR > e = < ELSE > < RARROW >    {
      jjtThis.hasElse = true;      newScope = new SymbolTable();      newScope.parent = currentTable;      currentTable = newScope;    }    stms()    {      currentTable = currentTable.parent;    }  ]  < FI >
  }/*
do	-> 'do' exp '->' stms 'od'
*/void dostm() :{  debug("do()");  TypeRecord conditionType;  Token dotoken;}{  dotoken = < DO > conditionType = noAssignExp()  {    if (!conditionType.equals(TypeRecord.boolType))    {      throw new TypeException(TypeError.WRONG_TYPE, "do condition must be bool", dotoken);    }  }  < RARROW >  {    SymbolTable newScope = new SymbolTable();    newScope.parent = currentTable;    currentTable = newScope;    loopStack.push("do");  }  stms()  {    loopStack.pop();    currentTable = currentTable.parent;  }  < OD >}/*
fa	-> 'fa' id ':=' exp 'to' exp '->' stms 'af'
*/void fa() :{  debug("fa()");  TypeRecord lowType;  TypeRecord highType;  Token dotoken;  Token id;}{  < FA > id = < ID > < ASSIGN > lowType = noAssignExp()  {    if (!lowType.equals(TypeRecord.intType))    {      throw new TypeException(TypeError.WRONG_TYPE, "low condition must be int", id);    }  }  < TO > highType = noAssignExp()  {    if (!highType.equals(TypeRecord.intType))    {      throw new TypeException(TypeError.WRONG_TYPE, "high condition must be int", id);    }  }  < RARROW >  {    SymbolTable newScope = new SymbolTable();    newScope.parent = currentTable;    currentTable = newScope;    currentTable.insertId(id, new TypeRecord(BasicType.INT, true));
    jjtThis.setFirstToken(id);    loopStack.push("fa");  }  stms()  {    loopStack.pop();    currentTable = currentTable.parent;  }  < AF >}/*
proc	-> 'proc' id '(' declist ')'
		{type|var} {stm} 'end'
	-> 'proc' id '(' declist ')' ':' typeid 
		{type|var} {stm} 'end'
*/void proc() :{  debug("proc()");  Token id;  List < ParaType > paras;  TypeRecord returnType = null;  ProcType forwardType = null;  Token end;
  ProcType newproc = null;
  TypeRecord varType = null;}{  < PROC > id = < ID >  {    if (currentTable.existsProc(id))    {      throw new SymbolTableException(LookupError.PROC_ALREADY_DEFINED, id, "proc has been defined in current table.");    }    if (currentTable.existsForward(id))    {      forwardType = currentTable.lookupForward(id);    }  }  < LPAREN > paras = declist() < RPAREN >  [    < COLON > typeid()    {      returnType = (TypeRecord) ((SimpleNode) (jjtree.peekNode())).jjtGetValue();    }  ]  {    if (forwardType != null)    {      if (returnType == null)      {        returnType = TypeRecord.voidType;      }      if (!returnType.equals(forwardType.returnType))      {        throw new TypeException(TypeError.WRONG_TYPE, "proc " + id.image + " return type of proc is different from forward", id);      }      List < ParaType > forwardParas = forwardType.paraTypes;      if (paras.size() != forwardParas.size())      {        throw new TypeException(TypeError.WRONG_TYPE, "proc " + id.image + " size of parameters of proc is different from forward", id);      }      for (int i = 0; i < paras.size(); i++)      {        if (!paras.get(i).type.equals(forwardParas.get(i).type))        {          throw new TypeException(TypeError.WRONG_TYPE, "proc " + id.image + " " + i + "th para is different from forward", id);        }      }    }    newproc = new ProcType(returnType, paras);    currentTable.insertProc(id, newproc);    jjtThis.jjtSetValue(TypeRecord.voidType);    SymbolTable newScope = new SymbolTable();    newScope.parent = currentTable;    currentTable = newScope;    if (returnType != null)    {      currentTable.insertId(id, returnType);    }    for (ParaType para : paras)    {      currentTable.insertId(para.id, para.type);    }  }  (    type()  | varType = var()  {
    SimpleNode varNode = (SimpleNode) jjtree.peekNode();
    if(!newproc.localVariablesHashMap.containsKey(varType))    {
      newproc.localVariablesHashMap.put(varType,new ArrayList<Token>());    }
    newproc.localVariablesHashMap.get(varType).addAll(varNode.getTokens());
      }  )*  (    stm()  )*  {
    jjtThis.setFirstToken(id);    currentTable = currentTable.parent;
      }  end = < END >}/*var	-> 'var' varlist
varlist  -> idlist ':' typeid { '[' int ']' } { ',' varlist}*/TypeRecord varlist() :{  debug("varlist()");  List < Token > tokens;  TypeRecord type;  Token size;  String typeid;  TypeRecord currentType;  SimpleNode typeNode;  boolean isFirst = true;  TypeRecord baseType;  TypeRecord returnType;}{  tokens = idlist() < COLON > typeid = typeid()  {    typeNode = (SimpleNode) jjtree.peekNode();    currentType = (TypeRecord) typeNode.jjtGetValue();    baseType = currentType;    returnType = currentType;  }  (    < LBRACE > size = < INT > < RBRACE >    {      if (Integer.parseInt(size.image) == 0)      {        throw new TypeException(TypeError.WRONG_VALUE, "array size cannot be 0", size);      }      int intsize = Integer.parseInt(size.image);      if (isFirst)      {        currentType = TypeRecord.arrayType(intsize, currentType);        isFirst = false;        returnType = currentType;      }      else      {        TypeRecord newArray = TypeRecord.arrayType(intsize, baseType);        currentType.underType = newArray;        currentType = newArray;      }    }  )*  {
    jjtThis.jjtSetValue(returnType);    currentTable.insertIds(tokens, returnType);
    for(Token t:tokens)    {
      jjtThis.addToken(t);    }
    return returnType;  }  (    LOOKAHEAD(2)    < COMMA > varlist()  )*}TypeRecord var() :{  debug("var()");
  TypeRecord type = null;}{  < VAR > type = varlist()
  {
    jjtThis.jjtSetValue(type);
    SimpleNode varlist = (SimpleNode)jjtThis.jjtGetChild(0);
    jjtThis.setTokens(varlist.getTokens());
    return type;  }}/*
forward -> 'forward' id '(' declist ')'
	-> 'forward' id '(' declist ')' ':' typeid
declist	-> idlist ':' typeid { ',' declist }
	->			# empty
*/List < ParaType > declist() :{  debug("declist()");  List < Token > ids = new ArrayList < Token > ();  List < ParaType > paraTypes = new ArrayList < ParaType > ();  SimpleNode typeNode;  TypeRecord type;  List < ParaType > newList;  HashSet < String > paraNames = new HashSet < String > ();}{  (    ids = idlist() < COLON > typeid()    {      typeNode = (SimpleNode) jjtree.peekNode();      type = (TypeRecord) typeNode.jjtGetValue();      for (Token id : ids)      {        if (paraNames.contains(id.image))        {          throw new TypeException(TypeError.PARA_NAME_ALREADY_DEFINED, "parameter name in proc declaration cannot be same", id);        }        paraNames.add(id.image);        paraTypes.add(new ParaType(type, id));      }    }    (      LOOKAHEAD(2)      < COMMA > newList = declist()      {        for (ParaType paratype : newList)        {          paraTypes.add(paratype);        }      }    )*  |    {}  )  {    return paraTypes;  }}void forward() :{  debug("forward()");  Token id;  List < ParaType > paras = null;  TypeRecord returnType = null;}{  < FORWARD > id = < ID > < LPAREN > paras = declist() < RPAREN >  [    ":" typeid()    {      returnType = (TypeRecord) ((SimpleNode) (jjtree.peekNode())).jjtGetValue();    }  ]  {    if (returnType == null)    {      returnType = TypeRecord.voidType;    }    ProcType newforward = new ProcType(returnType, paras);    currentTable.insertForward(id, newforward);  }}/* type	-> 'type' id '=' typeid { '[' int ']' } */void type() :{  debug("type()");  Token id;  String typeId;  TypeRecord baseType;  Token size;  TypeRecord returnType;  TypeRecord currentType;  boolean isFirst = true;}{  < TYPE > id = < ID > < EQUAL > typeId = typeid()  {    baseType = (TypeRecord) (((SimpleNode) (jjtree.peekNode())).jjtGetValue());    currentType = baseType;    returnType = currentType;  }  (    < LBRACE > size = < INT > < RBRACE >    {      int intsize = Integer.parseInt(size.image);      if (intsize == 0)      {        throw new TypeException(TypeError.WRONG_VALUE, "array size cannot be 0", size);      }      if (isFirst)      {        currentType = TypeRecord.arrayType(intsize, baseType);        returnType = currentType;        isFirst = false;      }      else      {        TypeRecord newArray = TypeRecord.arrayType(intsize, baseType);        currentType.underType = newArray;        currentType = newArray;      }    }  )*  {    currentTable.insertType(id, returnType);    jjtThis.jjtSetValue(returnType);  }}/*
lvalue	-> id | lvalue '[' exp ']'
*/TypeRecord lvalue() :{  debug("lvalue()");  Token id;  TypeRecord type;  Token lbrace;  TypeRecord indexType;
  TypeRecord lookupType;}{  id = < ID >  {    type = currentTable.lookupId(id);
    lookupType = type;
    if(TypeRecord.isArray(type))    {
      jjtThis.isArray = true;    }  }  (    lbrace = < LBRACE > indexType = noAssignExp() < RBRACE >    {      if (!TypeRecord.isArray(type))      {        throw new TypeException(TypeError.WRONG_TYPE, "type must be array for indexing", lbrace);      }      if (!indexType.equals(TypeRecord.intType))      {        throw new TypeException(TypeError.WRONG_TYPE, "array index must be integer", lbrace);      }      type = type.underType;
          }  )*  {
    jjtThis.originalType = lookupType;    debugTable("id:" + id + " type: " + type);    jjtThis.jjtSetValue(type);
    jjtThis.setFirstToken(id);    return type;  }}/*
exp	-> lvalue
	-> lvalue ':=' exp
	-> int				# integer literal
	-> 'true'			# boolean literal
	-> 'false'			# boolean literal
	-> string
	-> 'read'
	-> '-' exp
	-> '?' exp
	-> id '(' ')'			# procedure call
	-> id '(' exp { ',' exp } ')'	# procedure call
	-> exp '+' exp
	-> exp '-' exp
	-> exp '*' exp
	-> exp '/' exp
	-> exp '%' exp
	-> exp '=' exp
	-> exp '!=' exp
	-> exp '>' exp
	-> exp '<' exp
	-> exp '>=' exp
	-> exp '<=' exp
	-> '(' exp ')'
*/Token compareOp() :{  Token t;}{  (    t = < EQUAL >  | t = < NOTEQUAL >  | t = < GREATERTHAN >  | t = < LESSTHAN >  | t = < NOTGREATERTHAN >  | t = < NOTLESSTHAN >  )  {    jjtThis.setFirstToken(t);    return t;  }}void Additive() :{  Object returnType;  Token t;}{  Times()  {    returnType = ((SimpleNode) (jjtree.peekNode())).jjtGetValue();  }  (    LOOKAHEAD(2)    (      t = < PLUS >    | t = < MINUS >    )    Times() #plusMinus(2)  {    SimpleNode plusMinusNode = (SimpleNode) jjtree.peekNode();    plusMinusNode.setFirstToken(t);    SimpleNode firstChild = ((SimpleNode) (plusMinusNode.jjtGetChild(0)));    SimpleNode secondChild = ((SimpleNode) (plusMinusNode.jjtGetChild(1)));    TypeRecord firstType = (TypeRecord) firstChild.jjtGetValue();    TypeRecord secondType = (TypeRecord) secondChild.jjtGetValue();    if (firstType.equals(TypeRecord.strType))    {      throw new TypeException(TypeError.WRONG_TYPE, "string type not allowed", t);    }    if (TypeRecord.isArray(returnType))    {      throw new TypeException(TypeError.WRONG_TYPE, "array type not allowed", t);    }    if (!firstType.equals(secondType))    {      throw new TypeException(TypeError.TYPE_NOT_EQUAL, "type not equal in times", t);    }    if (firstType.equals(TypeRecord.boolType) && (t.image.equals("-") || t.image.equals("%")))    {      throw new TypeException(TypeError.WRONG_TYPE, "cannot use -/% for two bools", t);    }    returnType = firstType;    plusMinusNode.jjtSetValue(returnType);  })*{  jjtThis.jjtSetValue(returnType);  debug2("in additive: ");  debug2("this: " + jjtThis.jjtGetValue());}}void Times() :{  Object returnType;  Token t;}{  PrefixExp()  {    returnType = ((SimpleNode) (jjtree.peekNode())).jjtGetValue();  }  (    LOOKAHEAD(2)    (      t = < MULTIPLY >    | t = < DIVIDE >    | t = < MOD >    )    PrefixExp() #timeDivide(2)  {    SimpleNode timesNode = (SimpleNode) jjtree.peekNode();    timesNode.setFirstToken(t);    SimpleNode firstChild = ((SimpleNode) (timesNode.jjtGetChild(0)));    SimpleNode secondChild = ((SimpleNode) (timesNode.jjtGetChild(1)));    TypeRecord firstType = (TypeRecord) firstChild.jjtGetValue();    TypeRecord secondType = (TypeRecord) secondChild.jjtGetValue();    if (firstType.equals(TypeRecord.strType))    {      throw new TypeException(TypeError.WRONG_TYPE, "string type not allowed", t);    }    if (TypeRecord.isArray(returnType))    {      throw new TypeException(TypeError.WRONG_TYPE, "array type not allowed", t);    }    if (!firstType.equals(secondType))    {      throw new TypeException(TypeError.TYPE_NOT_EQUAL, "type not equal in times", t);    }    if (firstType.equals(TypeRecord.boolType) && t.image.equals("/"))    {      throw new TypeException(TypeError.WRONG_TYPE, "cannot use / for two bools", t);    }    returnType = firstType;    timesNode.jjtSetValue(returnType);  })*{  jjtThis.jjtSetValue(returnType);  debug2("in times: ");  debug2("this: " + jjtThis.jjtGetValue());}}TypeRecord PrefixExp() :{  TypeRecord returnType;}{  (    returnType = Unary()  | returnType = PrimaryExp()  )  {    jjtThis.jjtSetValue(returnType);    return returnType;  }}TypeRecord Unary() :{  Object returnType;  Token t = null;  Token t2 = null;}{  (    t = < MINUS > [ t2 = < QUESTION > ] returnType = PrimaryExp()  | t = < QUESTION > [ t2 = < MINUS > ] returnType = PrimaryExp()  )  {    if (returnType.equals(TypeRecord.strType))    {      throw new TypeException(TypeError.WRONG_TYPE, "string type not allowed", t);    }    if (TypeRecord.isArray(returnType))    {      throw new TypeException(TypeError.WRONG_TYPE, "array type not allowed", t);    }    if ((t.image.equals("?") || (t2 != null && t2.image.equals("?"))) && !returnType.equals(TypeRecord.boolType))    {      throw new TypeException(TypeError.WRONG_TYPE, "unary ? only allows bool", t);    }    if (t.image.equals("-") && (!returnType.equals(TypeRecord.boolType) && !returnType.equals(TypeRecord.intType)))    {      throw new TypeException(TypeError.WRONG_TYPE, "unary - only allows bool and int", t);    }    if ((t.image.equals("?") || (t2 != null && t2.image.equals("?"))) && returnType.equals(TypeRecord.boolType))    {      returnType = TypeRecord.clone(TypeRecord.intType);    }    jjtThis.jjtSetValue(returnType);    jjtThis.addToken(t);    jjtThis.addToken(t2);    debug2("in unary: ");    debug2("this: " + jjtThis.jjtGetValue());    return (TypeRecord) returnType;  }}TypeRecord PrimaryExp() :{  TypeRecord returnType;  SimpleNode child;  Token t = null;}{  (    returnType = intTerm()  | returnType = boolTerm()  | returnType = stringTerm()    | returnType = readTerm()  | < LPAREN > returnType = noAssignExp() < RPAREN >    {      jjtThis.jjtSetValue(returnType);    }  | LOOKAHEAD(procedureCall())    returnType = procedureCall()    {      jjtThis.jjtSetValue(returnType);    }  | returnType = lvalue()    {      jjtThis.jjtSetValue(returnType);    }  )  {    jjtThis.jjtSetValue(returnType);    jjtThis.setFirstToken(t);    return returnType;  }}TypeRecord intTerm() :{  Token t;}{  t = < INT >  {    jjtThis.jjtSetValue(TypeRecord.clone(TypeRecord.intType));    debug2("found int types");    debug2("this: " + jjtThis.jjtGetValue());    jjtThis.setFirstToken(t);    return TypeRecord.intType;  }}TypeRecord boolTerm() :{  Token t;}{  (    t = < TRUE >    {      jjtThis.jjtSetValue(TypeRecord.clone(TypeRecord.boolType));    }  | t = < FALSE >    {      jjtThis.jjtSetValue(TypeRecord.clone(TypeRecord.boolType));    }  )  {    jjtThis.setFirstToken(t);    return TypeRecord.boolType;  }}TypeRecord readTerm() :{  Token t;}{  t = < READ >  {    jjtThis.jjtSetValue(TypeRecord.clone(TypeRecord.intType));  }  {    jjtThis.setFirstToken(t);    return TypeRecord.intType;  }}TypeRecord stringTerm() :{  Token t;}{  t = < STRING >  {
    TypeRecord newTypeRecord = new TypeRecord(BasicType.STRING);
    int strLength = t.image.length()-2;
    newTypeRecord.length = strLength;
    newTypeRecord.token = t;
    if(!stringTable.containsKey(t.image))    {
      stringTable.put(t.image,0);    }
        jjtThis.jjtSetValue(newTypeRecord);  }  {    jjtThis.setFirstToken(t);    return newTypeRecord;  }}TypeRecord procedureCall() :{  Token id;  ProcType proc;  List < TypeRecord > types = new ArrayList < TypeRecord > ();  TypeRecord paraType;  Token rparen;}{  id = < ID >  {    proc = currentTable.lookupProc(id);  }  < LPAREN >  [    paraType = noAssignExp()    {      types.add(paraType);    }    (      < COMMA > paraType = noAssignExp()      {        types.add(paraType);      }    )*  ]  rparen = < RPAREN >  {    if (types.size() != proc.paraTypes.size())    {      throw new TypeException(TypeError.WRONG_TYPE, "the size of parameters " + types.size() + " is not equal to the size of proc " + id.image + " parameters: " + proc.paraTypes.size(), rparen);    }    for (int i = 0; i < types.size(); i++)    {      TypeRecord procparaType = proc.paraTypes.get(i).type;      if (!types.get(i).equals(procparaType))      {        throw new TypeException(TypeError.WRONG_TYPE, i + "th parameter " + types.get(i) + " is not equal to " + i + "th parameter" + procparaType + " of proc " + id.image, rparen);      }    }
    jjtThis.setFirstToken(id);    jjtThis.jjtSetValue(proc.returnType);    return proc.returnType;  }}void associateExp() :{}{  Additive()  {    SimpleNode node = (SimpleNode) (jjtThis.jjtGetChild(0));    jjtThis.jjtSetValue(node.jjtGetValue());  }}void exp() :{  debug("exp()");  Token assign;}{  (    LOOKAHEAD(assignExp())    assignExp()  | noAssignExp()    {      SimpleNode node = (SimpleNode) (jjtThis.jjtGetChild(0));      jjtThis.jjtSetValue(node.jjtGetValue());    }  )}void assignExp() :{  Token assign;}{  lvalue() assign = < ASSIGN > noAssignExp()  {    SimpleNode node = (SimpleNode) (jjtThis);    debug2("node in assign: " + node);    SimpleNode firstChild = ((SimpleNode) (node.jjtGetChild(0)));    SimpleNode secondChild = ((SimpleNode) (node.jjtGetChild(1)));    TypeRecord firstType = (TypeRecord) firstChild.jjtGetValue();    TypeRecord secondType = (TypeRecord) secondChild.jjtGetValue();    if (!firstType.equals(secondType))    {      throw new TypeException(TypeError.TYPE_NOT_EQUAL, "type not equal in assign", assign);    }    if (TypeRecord.isArray(firstType))    {      throw new TypeException(TypeError.WRONG_TYPE, "array type not allowed", assign);    }    if (firstType.notAssignable)    {      throw new TypeException(TypeError.WRONG_TYPE, "this lvalue is not assignable", assign);    }    jjtThis.jjtSetValue(TypeRecord.voidType);  }}TypeRecord noAssignExp() :{  Object returnType;  Token t;}{  associateExp()  {    returnType = ((SimpleNode) (jjtree.peekNode())).jjtGetValue();  }  [    t = compareOp() associateExp() #compares(3)  {    SimpleNode comparesNode = (SimpleNode) jjtree.peekNode();    debug2("in noassign: ");    debug2("comparesNode: " + comparesNode);    debug2("comparesNode: " + comparesNode.jjtGetValue());    comparesNode.setFirstToken(t);    //      System.out.println("timesNode: " + );    SimpleNode firstChild = ((SimpleNode) (comparesNode.jjtGetChild(0)));    SimpleNode secondChild = ((SimpleNode) (comparesNode.jjtGetChild(2)));    TypeRecord firstType = (TypeRecord) firstChild.jjtGetValue();    TypeRecord secondType = (TypeRecord) secondChild.jjtGetValue();    if (firstType.equals(TypeRecord.strType))    {      throw new TypeException(TypeError.WRONG_TYPE, "string type not allowed", t);    }    if (TypeRecord.isArray(returnType))    {      throw new TypeException(TypeError.WRONG_TYPE, "array type not allowed", t);    }    if (!firstType.equals(secondType))    {      throw new TypeException(TypeError.TYPE_NOT_EQUAL, "type not equal in times", t);    }    if (firstType.equals(TypeRecord.boolType) && (!t.image.equals("=") && !t.image.equals("!=")))    {      throw new TypeException(TypeError.WRONG_TYPE, "cannot use >/</>=/<= for two bools", t);    }    returnType = TypeRecord.boolType;  }]{  jjtThis.jjtSetValue(returnType);  return (TypeRecord) returnType;}}
/* Generated By:JJTree&JavaCC: Do not edit this line. Ice9Parser.java */
package parser;
import type.*;
import table.*;
import java.util.*;
import java.io.*;

@SuppressWarnings("all")
public class Ice9Parser/*@bgen(jjtree)*/implements Ice9ParserTreeConstants, Ice9ParserConstants {/*@bgen(jjtree)*/
  protected static JJTIce9ParserState jjtree = new JJTIce9ParserState();public static boolean isDebug = false;

  public static boolean isDebug2 = false;

  public static boolean debugTable = false;

  public static SymbolTable globalTable = new SymbolTable();

  public static SymbolTable currentTable = new SymbolTable();

  public static Stack < String > loopStack = new Stack < String > ();

  public static void debug(String text)
  {
    if (isDebug)
    {
      System.out.println(text);
    }
  }

  public static void debugTable(String text)
  {
    if (debugTable)
    {
      System.out.println(text);
    }
  }

  public static void debug2(String text)
  {
    if (isDebug2)
    {
      System.out.println(text);
    }
  }

  public static void debug()
  {
    System.out.println();
  }

  public static void main(String args []) throws ParseException, java.io.IOException
  {
    Ice9Parser parser = null;
    try
    {
      parser = new Ice9Parser(new java.io.FileInputStream("test-suite/tests/test245.9"));
      //      parser = new Ice9Parser(new java.io.FileInputStream("test.dat"));      //      parser = new Ice9Parser(System.in);      //      System.out.println("Reading from file " + "dice/test1.9");
      SimpleNode n = parser.program();
      //      n.dump("");      System.out.println("successfully");
    }
    //    catch (java.io.FileNotFoundException e)    //    {    //      System.out.println("Ice9 Parser:  File not found.");    //      return;    //    }    catch (TokenMgrError e)
    {
      //      System.out.println(e.getMessage());
      String message = e.getMessage();
      int lineIndex = message.indexOf("line");
      int commaIndex = message.indexOf(",");
      int quoteIndex = message.indexOf("\u005c"");
      int lineNbr = Integer.parseInt(message.substring(lineIndex + 5, commaIndex));
      String t = message.substring(quoteIndex + 1, message.length() - 1);
      System.out.println("line " + lineNbr + ": illegal character (" + t + ")");
    }
    catch (TypeException e)
    {
      System.out.println(e.prettyMessage());
      System.out.println(e.getMessage());
      //      System.out.println(e.getMessage());
    }
    catch (SymbolTableException e)
    {
      System.out.println(e.prettyMessage());
      System.out.println(e.getMessage());
    }
    catch (ParseException e)
    {
      Token t = e.currentToken;
      int line = t.next.beginLine;
      String value = t.image;
      if (value == null)
      {
        value = "";
      }
      System.out.println("line " + line + ": syntax error near " + value);
      System.out.println(e.getMessage());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    catch (Error e)
    {
      e.printStackTrace();
    }
    finally
    {
      debugTable("debug table: " + currentTable.toString());
    }
    FileWriter fstream = new FileWriter("test.out");
    BufferedWriter out = new BufferedWriter(fstream);
    for (int i = 1; i <= 256; i++)
    {
      try
      {
        System.out.println("parsing " + "test-suite/tests/test" + i + ".9");
        parser.ReInit(new java.io.FileInputStream("test-suite/tests/test" + i + ".9"));
        parser.program();
        System.out.println("successfully");
        out.write("test " + i + " successful!\u005cn");
      }
      catch (TokenMgrError e)
      {
        //      System.out.println(e.getMessage());
        String message = e.getMessage();
        int lineIndex = message.indexOf("line");
        int commaIndex = message.indexOf(",");
        int quoteIndex = message.indexOf("\u005c"");
        int lineNbr = Integer.parseInt(message.substring(lineIndex + 5, commaIndex));
        String t = message.substring(quoteIndex + 1, message.length() - 1);
        System.out.println("line " + lineNbr + ": illegal character (" + t + ")");
      }
      catch (TypeException e)
      {
        System.out.println(e.prettyMessage());
        System.out.println(e.getMessage());
        //      System.out.println(e.getMessage());
      }
      catch (SymbolTableException e)
      {
        System.out.println(e.prettyMessage());
        System.out.println(e.getMessage());
      }
      catch (ParseException e)
      {
        Token t = e.currentToken;
        int line = t.next.beginLine;
        String value = t.image;
        if (value == null)
        {
          value = "";
        }
        System.out.println("line " + line + ": syntax error near " + value);
        System.out.println(e.getMessage());
      }
      catch (Exception e)
      {
        e.printStackTrace();
      }
      catch (Error e)
      {
        e.printStackTrace();
      }
    }
    try
    {
      out.close();
    }
    catch (Exception e)
    {}
  }

/*
program	-> {var|type|forward|proc} stms
*/
  static final public SimpleNode program() throws ParseException {
 /*@bgen(jjtree) program */
  ASTprogram jjtn000 = new ASTprogram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);globalTable = new SymbolTable();
  globalTable.parent = SymbolTable.buildInTable();
  currentTable = globalTable;
  Token end;
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
        case PROC:
        case FORWARD:
        case TYPE:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
          var();
          break;
        case TYPE:
          type();
          break;
        case FORWARD:
          forward();
          break;
        case PROC:
          proc();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      stms();

      end = jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    List < String > forwardWOProcs = currentTable.getForwardsWithoutProc();
    if (forwardWOProcs.size() > 0)
    {
      {if (true) throw new TypeException(TypeError.FORWARD_WITHOUT_PROC, "These forward: " + forwardWOProcs + " has not proc definition.", end);}
    }
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void tokenTest() throws ParseException {
 /*@bgen(jjtree) tokenTest */
  ASTtokenTest jjtn000 = new ASTtokenTest(JJTTOKENTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRING);
    debug("parsing string: " + t.image);
      jj_consume_token(0);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public String typeid() throws ParseException {
 /*@bgen(jjtree) typeid */
  ASTtypeid jjtn000 = new ASTtypeid(JJTTYPEID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);debug("in type id");
  Token id;
    try {
      id = jj_consume_token(ID);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    TypeRecord type = currentTable.lookupType(id, id.image);
    jjtn000.jjtSetValue(type);
    {if (true) return id.image;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String op() throws ParseException {
 /*@bgen(jjtree) op */
  ASTop jjtn000 = new ASTop(JJTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);debug("in op");
  Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      case MULTIPLY:
        t = jj_consume_token(MULTIPLY);
        break;
      case DIVIDE:
        t = jj_consume_token(DIVIDE);
        break;
      case MOD:
        t = jj_consume_token(MOD);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t.image;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/*idlist  -> id { ',' id}*/
  static final public List < Token > idlist() throws ParseException {
 /*@bgen(jjtree) idlist */
  ASTidlist jjtn000 = new ASTidlist(JJTIDLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);debug("in IdList");
  List < Token > tokens = new ArrayList < Token > ();
  Token current;
    try {
      current = jj_consume_token(ID);
    tokens.add(current);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        current = jj_consume_token(ID);
      tokens.add(current);
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return tokens;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/*
stms	-> stm { stm }		# there is at least one stm

stm	-> if | do | fa | 'break' ';' | 'exit' ';'
	-> 'return' ';'
	-> 'write' exp ';' | 'writes' exp ';'
	-> exp ';'		# any exp is valid
	-> ';'			# the "empty" statement
*/
  static final public void stms() throws ParseException {
 /*@bgen(jjtree) stms */
  ASTstms jjtn000 = new ASTstms(JJTSTMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_3:
      while (true) {
        stm();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RETURN:
        case READ:
        case WRITE:
        case WRITES:
        case IF:
        case DO:
        case FA:
        case BREAK:
        case EXIT:
        case TRUE:
        case FALSE:
        case ID:
        case INT:
        case STRING:
        case MINUS:
        case LPAREN:
        case QUESTION:
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void stm() throws ParseException {
 /*@bgen(jjtree) stm */
  ASTstm jjtn000 = new ASTstm(JJTSTM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURN:
      case READ:
      case WRITE:
      case WRITES:
      case DO:
      case FA:
      case BREAK:
      case EXIT:
      case TRUE:
      case FALSE:
      case ID:
      case INT:
      case STRING:
      case MINUS:
      case LPAREN:
      case QUESTION:
      case SEMICOLON:
        otherstm();
        break;
      case IF:
        ifstm();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void otherstm() throws ParseException {
 /*@bgen(jjtree) otherstm */
  ASTotherstm jjtn000 = new ASTotherstm(JJTOTHERSTM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);debug("in other");
  TypeRecord returnType;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DO:
        dostm();
        break;
      case FA:
        fa();
        break;
      case BREAK:
        break_stm();
        break;
      case EXIT:
        exit_stm();
        break;
      case RETURN:
        return_stm();
        break;
      case WRITE:
      case WRITES:
        write_stm();
        break;
      case READ:
      case TRUE:
      case FALSE:
      case ID:
      case INT:
      case STRING:
      case MINUS:
      case LPAREN:
      case QUESTION:
        exp();
        jj_consume_token(SEMICOLON);
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public TypeRecord return_stm() throws ParseException {
 /*@bgen(jjtree) return_stm */
  ASTreturn_stm jjtn000 = new ASTreturn_stm(JJTRETURN_STM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(RETURN);
      jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(TypeRecord.voidType);
    {if (true) return TypeRecord.voidType;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public TypeRecord exit_stm() throws ParseException {
 /*@bgen(jjtree) exit_stm */
  ASTexit_stm jjtn000 = new ASTexit_stm(JJTEXIT_STM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(EXIT);
      jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(TypeRecord.voidType);
    {if (true) return TypeRecord.voidType;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public TypeRecord break_stm() throws ParseException {
 /*@bgen(jjtree) break_stm */
  ASTbreak_stm jjtn000 = new ASTbreak_stm(JJTBREAK_STM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(BREAK);
    if (loopStack.empty())
    {
      {if (true) throw new TypeException(TypeError.WRONG_USAGE, "break is not allowed in the scopes without loop", t);}
    }
      jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(TypeRecord.voidType);
    {if (true) return TypeRecord.voidType;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void write_stm() throws ParseException {
 /*@bgen(jjtree) write_stm */
  ASTwrite_stm jjtn000 = new ASTwrite_stm(JJTWRITE_STM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);TypeRecord returnType;
  Token write;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WRITE:
        write = jj_consume_token(WRITE);
        break;
      case WRITES:
        write = jj_consume_token(WRITES);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      returnType = noAssignExp();
    if (TypeRecord.isArray(returnType))
    {
      {if (true) throw new TypeException(TypeError.WRONG_TYPE, "array type not allowed", write);}
    }
    if (returnType.equals(TypeRecord.boolType))
    {
      {if (true) throw new TypeException(TypeError.WRONG_TYPE, "bool type not allowed", write);}
    }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
if	-> 'if' exp '->' stms { '[]' exp '->' stms } 'fi'
	-> 'if' exp '->' stms { '[]' exp '->' stms } '[]' 'else' '->' stms 'fi'
*/
  static final public void ifstm() throws ParseException {
 /*@bgen(jjtree) ifstm */
  ASTifstm jjtn000 = new ASTifstm(JJTIFSTM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);debug("if()");
  TypeRecord conditionType;
  Token iftoken;
  SymbolTable newScope;
    try {
      iftoken = jj_consume_token(IF);
      conditionType = noAssignExp();
    debug2("type:" + conditionType);
    if (!conditionType.equals(TypeRecord.boolType))
    {
      {if (true) throw new TypeException(TypeError.WRONG_TYPE, "if condition must be bool", iftoken);}
    }
      jj_consume_token(RARROW);
    newScope = new SymbolTable();
    newScope.parent = currentTable;
    currentTable = newScope;
      stms();
    currentTable = currentTable.parent;
      label_4:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(LR);
        conditionType = noAssignExp();
      if (!conditionType.equals(TypeRecord.boolType))
      {
        {if (true) throw new TypeException(TypeError.WRONG_TYPE, "if condition must be bool", iftoken);}
      }
        jj_consume_token(RARROW);
      newScope = new SymbolTable();
      newScope.parent = currentTable;
      currentTable = newScope;
        stms();
      currentTable = currentTable.parent;
      }
      if (jj_2_2(2)) {
        jj_consume_token(LR);
        jj_consume_token(ELSE);
        jj_consume_token(RARROW);
      newScope = new SymbolTable();
      newScope.parent = currentTable;
      currentTable = newScope;
        stms();
      currentTable = currentTable.parent;
      } else {
        ;
      }
      jj_consume_token(FI);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
do	-> 'do' exp '->' stms 'od'
*/
  static final public void dostm() throws ParseException {
 /*@bgen(jjtree) dostm */
  ASTdostm jjtn000 = new ASTdostm(JJTDOSTM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);debug("do()");
  TypeRecord conditionType;
  Token dotoken;
    try {
      dotoken = jj_consume_token(DO);
      conditionType = noAssignExp();
    if (!conditionType.equals(TypeRecord.boolType))
    {
      {if (true) throw new TypeException(TypeError.WRONG_TYPE, "do condition must be bool", dotoken);}
    }
      jj_consume_token(RARROW);
    SymbolTable newScope = new SymbolTable();
    newScope.parent = currentTable;
    currentTable = newScope;
    loopStack.push("do");
      stms();
    loopStack.pop();
    currentTable = currentTable.parent;
      jj_consume_token(OD);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
fa	-> 'fa' id ':=' exp 'to' exp '->' stms 'af'
*/
  static final public void fa() throws ParseException {
 /*@bgen(jjtree) fa */
  ASTfa jjtn000 = new ASTfa(JJTFA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);debug("fa()");
  TypeRecord lowType;
  TypeRecord highType;
  Token dotoken;
  Token id;
    try {
      jj_consume_token(FA);
      id = jj_consume_token(ID);
      jj_consume_token(ASSIGN);
      lowType = noAssignExp();
    if (!lowType.equals(TypeRecord.intType))
    {
      {if (true) throw new TypeException(TypeError.WRONG_TYPE, "low condition must be int", id);}
    }
      jj_consume_token(TO);
      highType = noAssignExp();
    if (!highType.equals(TypeRecord.intType))
    {
      {if (true) throw new TypeException(TypeError.WRONG_TYPE, "high condition must be int", id);}
    }
      jj_consume_token(RARROW);
    SymbolTable newScope = new SymbolTable();
    newScope.parent = currentTable;
    currentTable = newScope;
    currentTable.insertId(id, new TypeRecord(BasicType.INT, true));
    loopStack.push("fa");
      stms();
    loopStack.pop();
    currentTable = currentTable.parent;
      jj_consume_token(AF);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
proc	-> 'proc' id '(' declist ')'
		{type|var} {stm} 'end'
	-> 'proc' id '(' declist ')' ':' typeid 
		{type|var} {stm} 'end'
*/
  static final public void proc() throws ParseException {
 /*@bgen(jjtree) proc */
  ASTproc jjtn000 = new ASTproc(JJTPROC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);debug("proc()");
  Token id;
  List < ParaType > paras;
  TypeRecord returnType = null;
  ProcType forwardType = null;
  Token end;
    try {
      jj_consume_token(PROC);
      id = jj_consume_token(ID);
    if (currentTable.existsProc(id))
    {
      {if (true) throw new SymbolTableException(LookupError.PROC_ALREADY_DEFINED, id, "proc has been defined in current table.");}
    }
    if (currentTable.existsForward(id))
    {
      forwardType = currentTable.lookupForward(id);
    }
      jj_consume_token(LPAREN);
      paras = declist();
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        typeid();
      returnType = (TypeRecord) ((SimpleNode) (jjtree.peekNode())).jjtGetValue();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    if (forwardType != null)
    {
      if (returnType == null)
      {
        returnType = TypeRecord.voidType;
      }
      if (!returnType.equals(forwardType.returnType))
      {
        {if (true) throw new TypeException(TypeError.WRONG_TYPE, "proc " + id.image + " return type of proc is different from forward", id);}
      }
      List < ParaType > forwardParas = forwardType.paraTypes;
      if (paras.size() != forwardParas.size())
      {
        {if (true) throw new TypeException(TypeError.WRONG_TYPE, "proc " + id.image + " size of parameters of proc is different from forward", id);}
      }
      for (int i = 0; i < paras.size(); i++)
      {
        if (!paras.get(i).type.equals(forwardParas.get(i).type))
        {
          {if (true) throw new TypeException(TypeError.WRONG_TYPE, "proc " + id.image + " " + i + "th para is different from forward", id);}
        }
      }
    }
    ProcType newproc = new ProcType(returnType, paras);
    currentTable.insertProc(id, newproc);
    jjtn000.jjtSetValue(TypeRecord.voidType);
    SymbolTable newScope = new SymbolTable();
    newScope.parent = currentTable;
    currentTable = newScope;
    if (returnType != null)
    {
      currentTable.insertId(id, returnType);
    }
    for (ParaType para : paras)
    {
      currentTable.insertId(para.id, para.type);
    }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
        case TYPE:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TYPE:
          type();
          break;
        case VAR:
          var();
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RETURN:
        case READ:
        case WRITE:
        case WRITES:
        case IF:
        case DO:
        case FA:
        case BREAK:
        case EXIT:
        case TRUE:
        case FALSE:
        case ID:
        case INT:
        case STRING:
        case MINUS:
        case LPAREN:
        case QUESTION:
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_6;
        }
        stm();
      }
    currentTable = currentTable.parent;
      end = jj_consume_token(END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*var	-> 'var' varlist
varlist  -> idlist ':' typeid { '[' int ']' } { ',' varlist}*/
  static final public void varlist() throws ParseException {
 /*@bgen(jjtree) varlist */
  ASTvarlist jjtn000 = new ASTvarlist(JJTVARLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);debug("varlist()");
  List < Token > tokens;
  TypeRecord type;
  Token size;
  String typeid;
  TypeRecord currentType;
  SimpleNode typeNode;
  boolean isFirst = true;
  TypeRecord baseType;
  TypeRecord returnType;
    try {
      tokens = idlist();
      jj_consume_token(COLON);
      typeid = typeid();
    typeNode = (SimpleNode) jjtree.peekNode();
    currentType = (TypeRecord) typeNode.jjtGetValue();
    baseType = currentType;
    returnType = currentType;
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_7;
        }
        jj_consume_token(LBRACE);
        size = jj_consume_token(INT);
        jj_consume_token(RBRACE);
      if (Integer.parseInt(size.image) == 0)
      {
        {if (true) throw new TypeException(TypeError.WRONG_VALUE, "array size cannot be 0", size);}
      }
      int intsize = Integer.parseInt(size.image);
      if (isFirst)
      {
        currentType = TypeRecord.arrayType(intsize, currentType);
        isFirst = false;
        returnType = currentType;
      }
      else
      {
        TypeRecord newArray = TypeRecord.arrayType(intsize, baseType);
        currentType.underType = newArray;
        currentType = newArray;
      }
      }
    currentTable.insertIds(tokens, returnType);
      label_8:
      while (true) {
        if (jj_2_3(2)) {
          ;
        } else {
          break label_8;
        }
        jj_consume_token(COMMA);
        varlist();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void var() throws ParseException {
 /*@bgen(jjtree) var */
  ASTvar jjtn000 = new ASTvar(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);debug("var()");
    try {
      jj_consume_token(VAR);
      varlist();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
forward -> 'forward' id '(' declist ')'
	-> 'forward' id '(' declist ')' ':' typeid
declist	-> idlist ':' typeid { ',' declist }
	->			# empty
*/
  static final public List < ParaType > declist() throws ParseException {
 /*@bgen(jjtree) declist */
  ASTdeclist jjtn000 = new ASTdeclist(JJTDECLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);debug("declist()");
  List < Token > ids = new ArrayList < Token > ();
  List < ParaType > paraTypes = new ArrayList < ParaType > ();
  SimpleNode typeNode;
  TypeRecord type;
  List < ParaType > newList;
  HashSet < String > paraNames = new HashSet < String > ();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ids = idlist();
        jj_consume_token(COLON);
        typeid();
      typeNode = (SimpleNode) jjtree.peekNode();
      type = (TypeRecord) typeNode.jjtGetValue();
      for (Token id : ids)
      {
        if (paraNames.contains(id.image))
        {
          {if (true) throw new TypeException(TypeError.PARA_NAME_ALREADY_DEFINED, "parameter name in proc declaration cannot be same", id);}
        }
        paraNames.add(id.image);
        paraTypes.add(new ParaType(type, id));
      }
        label_9:
        while (true) {
          if (jj_2_4(2)) {
            ;
          } else {
            break label_9;
          }
          jj_consume_token(COMMA);
          newList = declist();
        for (ParaType paratype : newList)
        {
          paraTypes.add(paratype);
        }
        }
        break;
      default:
        jj_la1[13] = jj_gen;

      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return paraTypes;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void forward() throws ParseException {
 /*@bgen(jjtree) forward */
  ASTforward jjtn000 = new ASTforward(JJTFORWARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);debug("forward()");
  Token id;
  List < ParaType > paras = null;
  TypeRecord returnType = null;
    try {
      jj_consume_token(FORWARD);
      id = jj_consume_token(ID);
      jj_consume_token(LPAREN);
      paras = declist();
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        typeid();
      returnType = (TypeRecord) ((SimpleNode) (jjtree.peekNode())).jjtGetValue();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (returnType == null)
    {
      returnType = TypeRecord.voidType;
    }
    ProcType newforward = new ProcType(returnType, paras);
    currentTable.insertForward(id, newforward);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* type	-> 'type' id '=' typeid { '[' int ']' } */
  static final public void type() throws ParseException {
 /*@bgen(jjtree) type */
  ASTtype jjtn000 = new ASTtype(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);debug("type()");
  Token id;
  String typeId;
  TypeRecord baseType;
  Token size;
  TypeRecord returnType;
  TypeRecord currentType;
  boolean isFirst = true;
    try {
      jj_consume_token(TYPE);
      id = jj_consume_token(ID);
      jj_consume_token(EQUAL);
      typeId = typeid();
    baseType = (TypeRecord) (((SimpleNode) (jjtree.peekNode())).jjtGetValue());
    currentType = baseType;
    returnType = currentType;
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_10;
        }
        jj_consume_token(LBRACE);
        size = jj_consume_token(INT);
        jj_consume_token(RBRACE);
      int intsize = Integer.parseInt(size.image);
      if (intsize == 0)
      {
        {if (true) throw new TypeException(TypeError.WRONG_VALUE, "array size cannot be 0", size);}
      }
      if (isFirst)
      {
        currentType = TypeRecord.arrayType(intsize, baseType);
        returnType = currentType;
        isFirst = false;
      }
      else
      {
        TypeRecord newArray = TypeRecord.arrayType(intsize, baseType);
        currentType.underType = newArray;
        currentType = newArray;
      }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    currentTable.insertType(id, returnType);
    jjtn000.jjtSetValue(returnType);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
lvalue	-> id | lvalue '[' exp ']'
*/
  static final public TypeRecord lvalue() throws ParseException {
 /*@bgen(jjtree) lvalue */
  ASTlvalue jjtn000 = new ASTlvalue(JJTLVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);debug("lvalue()");
  Token id;
  TypeRecord type;
  Token lbrace;
  TypeRecord indexType;
    try {
      id = jj_consume_token(ID);
    type = currentTable.lookupId(id);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_11;
        }
        lbrace = jj_consume_token(LBRACE);
        indexType = noAssignExp();
        jj_consume_token(RBRACE);
      if (!TypeRecord.isArray(type))
      {
        {if (true) throw new TypeException(TypeError.WRONG_TYPE, "type must be array for indexing", lbrace);}
      }
      if (!indexType.equals(TypeRecord.intType))
      {
        {if (true) throw new TypeException(TypeError.WRONG_TYPE, "array index must be integer", lbrace);}
      }
      type = type.underType;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    debugTable("id:" + id + " type: " + type);
    jjtn000.jjtSetValue(type);
    {if (true) return type;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/*
exp	-> lvalue
	-> lvalue ':=' exp
	-> int				# integer literal
	-> 'true'			# boolean literal
	-> 'false'			# boolean literal
	-> string
	-> 'read'
	-> '-' exp
	-> '?' exp
	-> id '(' ')'			# procedure call
	-> id '(' exp { ',' exp } ')'	# procedure call
	-> exp '+' exp
	-> exp '-' exp
	-> exp '*' exp
	-> exp '/' exp
	-> exp '%' exp
	-> exp '=' exp
	-> exp '!=' exp
	-> exp '>' exp
	-> exp '<' exp
	-> exp '>=' exp
	-> exp '<=' exp
	-> '(' exp ')'
*/
  static final public Token compareOp() throws ParseException {
 /*@bgen(jjtree) compareOp */
  ASTcompareOp jjtn000 = new ASTcompareOp(JJTCOMPAREOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        t = jj_consume_token(EQUAL);
        break;
      case NOTEQUAL:
        t = jj_consume_token(NOTEQUAL);
        break;
      case GREATERTHAN:
        t = jj_consume_token(GREATERTHAN);
        break;
      case LESSTHAN:
        t = jj_consume_token(LESSTHAN);
        break;
      case NOTGREATERTHAN:
        t = jj_consume_token(NOTGREATERTHAN);
        break;
      case NOTLESSTHAN:
        t = jj_consume_token(NOTLESSTHAN);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Additive() throws ParseException {
 /*@bgen(jjtree) Additive */
  ASTAdditive jjtn000 = new ASTAdditive(JJTADDITIVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Object returnType;
  Token t;
    try {
      Times();
    returnType = ((SimpleNode) (jjtree.peekNode())).jjtGetValue();
      label_12:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          t = jj_consume_token(PLUS);
          break;
        case MINUS:
          t = jj_consume_token(MINUS);
          break;
        case MOD:
          t = jj_consume_token(MOD);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      ASTplusMinus jjtn001 = new ASTplusMinus(JJTPLUSMINUS);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
        try {
          Times();
        } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
        }
    SimpleNode timesNode = (SimpleNode) jjtree.peekNode();
    SimpleNode firstChild = ((SimpleNode) (timesNode.jjtGetChild(0)));
    SimpleNode secondChild = ((SimpleNode) (timesNode.jjtGetChild(1)));
    TypeRecord firstType = (TypeRecord) firstChild.jjtGetValue();
    TypeRecord secondType = (TypeRecord) secondChild.jjtGetValue();
    if (firstType.equals(TypeRecord.strType))
    {
      {if (true) throw new TypeException(TypeError.WRONG_TYPE, "string type not allowed", t);}
    }
    if (TypeRecord.isArray(returnType))
    {
      {if (true) throw new TypeException(TypeError.WRONG_TYPE, "array type not allowed", t);}
    }
    if (!firstType.equals(secondType))
    {
      {if (true) throw new TypeException(TypeError.TYPE_NOT_EQUAL, "type not equal in times", t);}
    }
    if (firstType.equals(TypeRecord.boolType) && (t.image.equals("-") || t.image.equals("%")))
    {
      {if (true) throw new TypeException(TypeError.WRONG_TYPE, "cannot use -/% for two bools", t);}
    }
    returnType = firstType;
    timesNode.jjtSetValue(returnType);
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
  jjtn000.jjtSetValue(returnType);
  debug2("in additive: ");
  debug2("this: " + jjtn000.jjtGetValue());
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Times() throws ParseException {
 /*@bgen(jjtree) Times */
  ASTTimes jjtn000 = new ASTTimes(JJTTIMES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Object returnType;
  Token t;
    try {
      PrefixExp();
    returnType = ((SimpleNode) (jjtree.peekNode())).jjtGetValue();
      label_13:
      while (true) {
        if (jj_2_6(2)) {
          ;
        } else {
          break label_13;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
          t = jj_consume_token(MULTIPLY);
          break;
        case DIVIDE:
          t = jj_consume_token(DIVIDE);
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      ASTtimeDivide jjtn001 = new ASTtimeDivide(JJTTIMEDIVIDE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
        try {
          PrefixExp();
        } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
        }
    SimpleNode timesNode = (SimpleNode) jjtree.peekNode();
    SimpleNode firstChild = ((SimpleNode) (timesNode.jjtGetChild(0)));
    SimpleNode secondChild = ((SimpleNode) (timesNode.jjtGetChild(1)));
    TypeRecord firstType = (TypeRecord) firstChild.jjtGetValue();
    TypeRecord secondType = (TypeRecord) secondChild.jjtGetValue();
    if (firstType.equals(TypeRecord.strType))
    {
      {if (true) throw new TypeException(TypeError.WRONG_TYPE, "string type not allowed", t);}
    }
    if (TypeRecord.isArray(returnType))
    {
      {if (true) throw new TypeException(TypeError.WRONG_TYPE, "array type not allowed", t);}
    }
    if (!firstType.equals(secondType))
    {
      {if (true) throw new TypeException(TypeError.TYPE_NOT_EQUAL, "type not equal in times", t);}
    }
    if (firstType.equals(TypeRecord.boolType) && t.image.equals("/"))
    {
      {if (true) throw new TypeException(TypeError.WRONG_TYPE, "cannot use / for two bools", t);}
    }
    returnType = firstType;
    timesNode.jjtSetValue(returnType);
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
  jjtn000.jjtSetValue(returnType);
  debug2("in times: ");
  debug2("this: " + jjtn000.jjtGetValue());
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public TypeRecord PrefixExp() throws ParseException {
 /*@bgen(jjtree) PrefixExp */
  ASTPrefixExp jjtn000 = new ASTPrefixExp(JJTPREFIXEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);TypeRecord returnType;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case QUESTION:
        returnType = Unary();
        break;
      case READ:
      case TRUE:
      case FALSE:
      case ID:
      case INT:
      case STRING:
      case LPAREN:
        returnType = PrimaryExp();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(returnType);
    {if (true) return returnType;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public TypeRecord Unary() throws ParseException {
 /*@bgen(jjtree) Unary */
  ASTUnary jjtn000 = new ASTUnary(JJTUNARY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Object returnType;
  Token t = null;
  Token t2 = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        t = jj_consume_token(MINUS);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case QUESTION:
          t2 = jj_consume_token(QUESTION);
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
        returnType = PrimaryExp();
        break;
      case QUESTION:
        t = jj_consume_token(QUESTION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
          t2 = jj_consume_token(MINUS);
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        returnType = PrimaryExp();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (returnType.equals(TypeRecord.strType))
    {
      {if (true) throw new TypeException(TypeError.WRONG_TYPE, "string type not allowed", t);}
    }
    if (TypeRecord.isArray(returnType))
    {
      {if (true) throw new TypeException(TypeError.WRONG_TYPE, "array type not allowed", t);}
    }
    if ((t.image.equals("?") || (t2 != null && t2.image.equals("?"))) && !returnType.equals(TypeRecord.boolType))
    {
      {if (true) throw new TypeException(TypeError.WRONG_TYPE, "unary ? only allows bool", t);}
    }
    if (t.image.equals("-") && (!returnType.equals(TypeRecord.boolType) && !returnType.equals(TypeRecord.intType)))
    {
      {if (true) throw new TypeException(TypeError.WRONG_TYPE, "unary - only allows bool and int", t);}
    }
    if ((t.image.equals("?") || (t2 != null && t2.image.equals("?"))) && returnType.equals(TypeRecord.boolType))
    {
      returnType = TypeRecord.intType;
    }
    jjtn000.jjtSetValue(returnType);
    debug2("in unary: ");
    debug2("this: " + jjtn000.jjtGetValue());
    {if (true) return (TypeRecord) returnType;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public TypeRecord PrimaryExp() throws ParseException {
 /*@bgen(jjtree) PrimaryExp */
  ASTPrimaryExp jjtn000 = new ASTPrimaryExp(JJTPRIMARYEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);TypeRecord returnType;
  SimpleNode child;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
      jjtn000.jjtSetValue(TypeRecord.intType);
      debug2("found int types");
      debug2("this: " + jjtn000.jjtGetValue());
      returnType = TypeRecord.intType;
        break;
      case TRUE:
        jj_consume_token(TRUE);
      jjtn000.jjtSetValue(TypeRecord.boolType);
      returnType = TypeRecord.boolType;
        break;
      case FALSE:
        jj_consume_token(FALSE);
      jjtn000.jjtSetValue(TypeRecord.boolType);
      returnType = TypeRecord.boolType;
        break;
      case STRING:
        jj_consume_token(STRING);
      jjtn000.jjtSetValue(TypeRecord.strType);
      returnType = TypeRecord.strType;
        break;
      case READ:
        jj_consume_token(READ);
      jjtn000.jjtSetValue(TypeRecord.intType);
      returnType = TypeRecord.intType;
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        returnType = noAssignExp();
        jj_consume_token(RPAREN);
      jjtn000.jjtSetValue(returnType);
        break;
      default:
        jj_la1[24] = jj_gen;
        if (jj_2_7(2147483647)) {
          returnType = procedureCall();
      jjtn000.jjtSetValue(returnType);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            returnType = lvalue();
      jjtn000.jjtSetValue(returnType);
            break;
          default:
            jj_la1[25] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return returnType;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public TypeRecord procedureCall() throws ParseException {
 /*@bgen(jjtree) procedureCall */
  ASTprocedureCall jjtn000 = new ASTprocedureCall(JJTPROCEDURECALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token id;
  ProcType proc;
  List < TypeRecord > types = new ArrayList < TypeRecord > ();
  TypeRecord paraType;
  Token rparen;
    try {
      id = jj_consume_token(ID);
    proc = currentTable.lookupProc(id);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case READ:
      case TRUE:
      case FALSE:
      case ID:
      case INT:
      case STRING:
      case MINUS:
      case LPAREN:
      case QUESTION:
        paraType = noAssignExp();
      types.add(paraType);
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[26] = jj_gen;
            break label_14;
          }
          jj_consume_token(COMMA);
          paraType = noAssignExp();
        types.add(paraType);
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      rparen = jj_consume_token(RPAREN);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (types.size() != proc.paraTypes.size())
    {
      {if (true) throw new TypeException(TypeError.WRONG_TYPE, "the size of parameters " + types.size() + " is not equal to the size of proc " + id.image + " parameters: " + proc.paraTypes.size(), rparen);}
    }
    for (int i = 0; i < types.size(); i++)
    {
      TypeRecord procparaType = proc.paraTypes.get(i).type;
      if (!types.get(i).equals(procparaType))
      {
        {if (true) throw new TypeException(TypeError.WRONG_TYPE, i + "th parameter " + types.get(i) + " is not equal to " + i + "th parameter" + procparaType + " of proc " + id.image, rparen);}
      }
    }
    jjtn000.jjtSetValue(proc.returnType);
    {if (true) return proc.returnType;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void associateExp() throws ParseException {
 /*@bgen(jjtree) associateExp */
  ASTassociateExp jjtn000 = new ASTassociateExp(JJTASSOCIATEEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Additive();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    SimpleNode node = (SimpleNode) (jjtn000.jjtGetChild(0));
    jjtn000.jjtSetValue(node.jjtGetValue());
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void exp() throws ParseException {
 /*@bgen(jjtree) exp */
  ASTexp jjtn000 = new ASTexp(JJTEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);debug("exp()");
  Token assign;
    try {
      if (jj_2_8(2147483647)) {
        lvalue();
        assign = jj_consume_token(ASSIGN);
        noAssignExp();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      SimpleNode node = (SimpleNode) (jjtn000);
      debug2("node in assign: " + node);
      SimpleNode firstChild = ((SimpleNode) (node.jjtGetChild(0)));
      SimpleNode secondChild = ((SimpleNode) (node.jjtGetChild(1)));
      TypeRecord firstType = (TypeRecord) firstChild.jjtGetValue();
      TypeRecord secondType = (TypeRecord) secondChild.jjtGetValue();
      if (!firstType.equals(secondType))
      {
        {if (true) throw new TypeException(TypeError.TYPE_NOT_EQUAL, "type not equal in assign", assign);}
      }
      if (TypeRecord.isArray(firstType))
      {
        {if (true) throw new TypeException(TypeError.WRONG_TYPE, "array type not allowed", assign);}
      }
      if (firstType.notAssignable)
      {
        {if (true) throw new TypeException(TypeError.WRONG_TYPE, "this lvalue is not assignable", assign);}
      }
      jjtn000.jjtSetValue(TypeRecord.voidType);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case READ:
        case TRUE:
        case FALSE:
        case ID:
        case INT:
        case STRING:
        case MINUS:
        case LPAREN:
        case QUESTION:
          noAssignExp();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      SimpleNode node = (SimpleNode) (jjtn000.jjtGetChild(0));
      jjtn000.jjtSetValue(node.jjtGetValue());
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public TypeRecord noAssignExp() throws ParseException {
 /*@bgen(jjtree) noAssignExp */
  ASTnoAssignExp jjtn000 = new ASTnoAssignExp(JJTNOASSIGNEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Object returnType;
  Token t;
    try {
      associateExp();
    returnType = ((SimpleNode) (jjtree.peekNode())).jjtGetValue();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
      case NOTEQUAL:
      case GREATERTHAN:
      case LESSTHAN:
      case NOTLESSTHAN:
      case NOTGREATERTHAN:
        t = compareOp();
                      ASTcompares jjtn001 = new ASTcompares(JJTCOMPARES);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
        try {
          associateExp();
        } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte001;}
                      }
                      if (jjte001 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte001;}
                      }
                      {if (true) throw (Error)jjte001;}
        } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  3);
                      }
        }
    SimpleNode timesNode = (SimpleNode) jjtree.peekNode();
    debug2("in noassign: ");
    debug2("timesNode: " + timesNode);
    debug2("timesNode: " + timesNode.jjtGetValue());
    //      System.out.println("timesNode: " + );
    SimpleNode firstChild = ((SimpleNode) (timesNode.jjtGetChild(0)));
    SimpleNode secondChild = ((SimpleNode) (timesNode.jjtGetChild(2)));
    TypeRecord firstType = (TypeRecord) firstChild.jjtGetValue();
    TypeRecord secondType = (TypeRecord) secondChild.jjtGetValue();
    if (firstType.equals(TypeRecord.strType))
    {
      {if (true) throw new TypeException(TypeError.WRONG_TYPE, "string type not allowed", t);}
    }
    if (TypeRecord.isArray(returnType))
    {
      {if (true) throw new TypeException(TypeError.WRONG_TYPE, "array type not allowed", t);}
    }
    if (!firstType.equals(secondType))
    {
      {if (true) throw new TypeException(TypeError.TYPE_NOT_EQUAL, "type not equal in times", t);}
    }
    if (firstType.equals(TypeRecord.boolType) && (!t.image.equals("=") && !t.image.equals("!=")))
    {
      {if (true) throw new TypeException(TypeError.WRONG_TYPE, "cannot use >/</>=/<= for two bools", t);}
    }
    returnType = TypeRecord.boolType;
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
  jjtn000.jjtSetValue(returnType);
  {if (true) return (TypeRecord) returnType;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(QUESTION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(37)) jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(MINUS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_35()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(LR)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) return true;
    }
    }
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_21()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(READ)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(LR)) return true;
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_15()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_34()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public Ice9ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc180,0xc180,0x0,0x0,0xfca23c00,0xfca23c00,0xfca03c00,0x3000,0x0,0x8080,0x8080,0xfca23c00,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0xf0000800,0x0,0x0,0x0,0xb0000800,0x40000000,0x0,0xf0000800,0xf0000800,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x1f0,0x20000,0xd00021,0xd00021,0xd00021,0x0,0x8000,0x0,0x0,0xd00021,0x40000,0x0,0x8000,0x40000,0x40000,0x7e00,0x130,0xc0,0x500021,0x400000,0x20,0x400020,0x100001,0x0,0x20000,0x500021,0x500021,0x7e00,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[8];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Ice9Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Ice9Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Ice9ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Ice9Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Ice9ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Ice9Parser(Ice9ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(Ice9ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

/* Generated By:JJTree&JavaCC: Do not edit this line. Ice9ParserConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface Ice9ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int VAR = 7;
  /** RegularExpression Id. */
  int PROC = 8;
  /** RegularExpression Id. */
  int END = 9;
  /** RegularExpression Id. */
  int RETURN = 10;
  /** RegularExpression Id. */
  int READ = 11;
  /** RegularExpression Id. */
  int WRITE = 12;
  /** RegularExpression Id. */
  int WRITES = 13;
  /** RegularExpression Id. */
  int FORWARD = 14;
  /** RegularExpression Id. */
  int TYPE = 15;
  /** RegularExpression Id. */
  int RARROW = 16;
  /** RegularExpression Id. */
  int IF = 17;
  /** RegularExpression Id. */
  int ELSE = 18;
  /** RegularExpression Id. */
  int FI = 19;
  /** RegularExpression Id. */
  int LR = 20;
  /** RegularExpression Id. */
  int DO = 21;
  /** RegularExpression Id. */
  int OD = 22;
  /** RegularExpression Id. */
  int FA = 23;
  /** RegularExpression Id. */
  int AF = 24;
  /** RegularExpression Id. */
  int TO = 25;
  /** RegularExpression Id. */
  int BREAK = 26;
  /** RegularExpression Id. */
  int EXIT = 27;
  /** RegularExpression Id. */
  int TRUE = 28;
  /** RegularExpression Id. */
  int FALSE = 29;
  /** RegularExpression Id. */
  int ID = 30;
  /** RegularExpression Id. */
  int INT = 31;
  /** RegularExpression Id. */
  int STRING = 32;
  /** RegularExpression Id. */
  int DIGIT = 33;
  /** RegularExpression Id. */
  int LETTER = 34;
  /** RegularExpression Id. */
  int UNDERSCORE = 35;
  /** RegularExpression Id. */
  int PLUS = 36;
  /** RegularExpression Id. */
  int MINUS = 37;
  /** RegularExpression Id. */
  int MULTIPLY = 38;
  /** RegularExpression Id. */
  int DIVIDE = 39;
  /** RegularExpression Id. */
  int MOD = 40;
  /** RegularExpression Id. */
  int EQUAL = 41;
  /** RegularExpression Id. */
  int NOTEQUAL = 42;
  /** RegularExpression Id. */
  int GREATERTHAN = 43;
  /** RegularExpression Id. */
  int LESSTHAN = 44;
  /** RegularExpression Id. */
  int NOTLESSTHAN = 45;
  /** RegularExpression Id. */
  int NOTGREATERTHAN = 46;
  /** RegularExpression Id. */
  int COLON = 47;
  /** RegularExpression Id. */
  int ASSIGN = 48;
  /** RegularExpression Id. */
  int COMMA = 49;
  /** RegularExpression Id. */
  int LBRACE = 50;
  /** RegularExpression Id. */
  int RBRACE = 51;
  /** RegularExpression Id. */
  int LPAREN = 52;
  /** RegularExpression Id. */
  int RPAREN = 53;
  /** RegularExpression Id. */
  int QUESTION = 54;
  /** RegularExpression Id. */
  int SEMICOLON = 55;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\\n\"",
    "<SINGLE_LINE_COMMENT>",
    "\"var\"",
    "\"proc\"",
    "\"end\"",
    "\"return\"",
    "\"read\"",
    "\"write\"",
    "\"writes\"",
    "\"forward\"",
    "\"type\"",
    "\"->\"",
    "\"if\"",
    "\"else\"",
    "\"fi\"",
    "\"[]\"",
    "\"do\"",
    "\"od\"",
    "\"fa\"",
    "\"af\"",
    "\"to\"",
    "\"break\"",
    "\"exit\"",
    "\"true\"",
    "\"false\"",
    "<ID>",
    "<INT>",
    "<STRING>",
    "<DIGIT>",
    "<LETTER>",
    "\"_\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\":\"",
    "\":=\"",
    "\",\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"?\"",
    "\";\"",
  };

}

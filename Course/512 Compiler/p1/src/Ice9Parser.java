/* Generated By:JavaCC: Do not edit this line. Ice9Parser.java */
@SuppressWarnings("all")
public class Ice9Parser implements Ice9ParserConstants {
  public static boolean isDebug = false;

  public static void debug(String text)
  {
    if (isDebug)
    {
      System.out.println(text);
    }
  }

  public static void debug()
  {
    System.out.println();
  }

  public static void main(String args []) throws ParseException, java.io.IOException
  {
    Ice9Parser parser = null;
    try
    {
      parser = new Ice9Parser(new java.io.FileInputStream("test.dat"));
      //      System.out.println("Reading from file " + "tests/test1.9");      parser.program();
    }
    catch (java.io.FileNotFoundException e)
    {
      System.out.println("Ice9 Parser:  File not found.");
      return;
    }
    catch (TokenMgrError e)
    {
//      System.out.println(e.getMessage());
      String message = e.getMessage();

      int lineIndex = message.indexOf("line");
      int commaIndex = message.indexOf(",");
      int quoteIndex = message.indexOf("\u005c"");
      String lineNbr = message.substring(lineIndex + 5, commaIndex);
      String t = message.substring(quoteIndex + 1,message.length() - 1);
      System.out.println("line " + lineNbr + ": illegal character (" + t + ")" );
    }
    catch (ParseException e)
    {
      Token t = e.currentToken;
      int line = t.next.beginLine;
      System.out.println("line " + line + ": syntax error near " + t.image);
    }
    catch (Exception e)
    {
      System.out.println(e.getMessage());
    }
    catch (Error e)
    {
      System.out.println(e.getMessage());
    }
  }

/*
program	-> {var|type|forward|proc} stms
*/
  static final public void program() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case PROC:
      case FORWARD:
      case TYPE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        var();
        break;
      case TYPE:
        type();
        break;
      case FORWARD:
        forward();
        break;
      case PROC:
        proc();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    stms();
    System.out.println("successfully!");
    jj_consume_token(0);
  }

  static final public void tokenTest() throws ParseException {
  Token t;
    t = jj_consume_token(STRING);
    debug("parsing string: " + t.image);
    jj_consume_token(0);
  }

  static final public void typeid() throws ParseException {
  debug("in type id");
    jj_consume_token(ID);
  }

  static final public String op() throws ParseException {
  debug("in op");
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      t = jj_consume_token(PLUS);
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
      break;
    case MULTIPLY:
      t = jj_consume_token(MULTIPLY);
      break;
    case DIVIDE:
      t = jj_consume_token(DIVIDE);
      break;
    case MOD:
      t = jj_consume_token(MOD);
      break;
    case EQUAL:
      t = jj_consume_token(EQUAL);
      break;
    case NOTEQUAL:
      t = jj_consume_token(NOTEQUAL);
      break;
    case GREATERTHAN:
      t = jj_consume_token(GREATERTHAN);
      break;
    case LESSTHAN:
      t = jj_consume_token(LESSTHAN);
      break;
    case NOTGREATERTHAN:
      t = jj_consume_token(NOTGREATERTHAN);
      break;
    case NOTLESSTHAN:
      t = jj_consume_token(NOTLESSTHAN);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/*idlist  -> id { ',' id}*/
  static final public void idlist() throws ParseException {
  debug("in IdList");
    jj_consume_token(ID);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      jj_consume_token(ID);
    }
  }

/*
stms	-> stm { stm }		# there is at least one stm

stm	-> if | do | fa | 'break' ';' | 'exit' ';'
	-> 'return' ';'
	-> 'write' exp ';' | 'writes' exp ';'
	-> exp ';'		# any exp is valid
	-> ';'			# the "empty" statement
*/
  static final public void stms() throws ParseException {
    label_3:
    while (true) {
      stm();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURN:
      case READ:
      case WRITE:
      case WRITES:
      case IF:
      case DO:
      case FA:
      case BREAK:
      case EXIT:
      case TRUE:
      case FALSE:
      case ID:
      case INT:
      case STRING:
      case MINUS:
      case LPAREN:
      case QUESTION:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
    }
  }

  static final public void stm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RETURN:
    case READ:
    case WRITE:
    case WRITES:
    case DO:
    case FA:
    case BREAK:
    case EXIT:
    case TRUE:
    case FALSE:
    case ID:
    case INT:
    case STRING:
    case MINUS:
    case LPAREN:
    case QUESTION:
    case SEMICOLON:
      otherstm();
      break;
    case IF:
      ifstm();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void otherstm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DO:
      dostm();
      break;
    case FA:
      fa();
      break;
    case BREAK:
      jj_consume_token(BREAK);
      jj_consume_token(SEMICOLON);
      break;
    case EXIT:
      jj_consume_token(EXIT);
      jj_consume_token(SEMICOLON);
      break;
    case RETURN:
      jj_consume_token(RETURN);
      jj_consume_token(SEMICOLON);
      break;
    case WRITE:
      jj_consume_token(WRITE);
      exp();
      jj_consume_token(SEMICOLON);
      break;
    case WRITES:
      jj_consume_token(WRITES);
      exp();
      jj_consume_token(SEMICOLON);
      break;
    case READ:
    case TRUE:
    case FALSE:
    case ID:
    case INT:
    case STRING:
    case MINUS:
    case LPAREN:
    case QUESTION:
      exp();
      jj_consume_token(SEMICOLON);
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
if	-> 'if' exp '->' stms { '[]' exp '->' stms } 'fi'
	-> 'if' exp '->' stms { '[]' exp '->' stms } '[]' 'else' '->' stms 'fi'
*/
  static final public void ifstm() throws ParseException {
  debug("if()");
    jj_consume_token(IF);
    exp();
    jj_consume_token(RARROW);
    stms();
    label_4:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(LR);
      exp();
      jj_consume_token(RARROW);
      stms();
    }
    if (jj_2_2(2)) {
      jj_consume_token(LR);
      jj_consume_token(ELSE);
      jj_consume_token(RARROW);
      stms();
    } else {
      ;
    }
    jj_consume_token(FI);
  }

/*
do	-> 'do' exp '->' stms 'od'
*/
  static final public void dostm() throws ParseException {
  debug("do()");
    jj_consume_token(DO);
    exp();
    jj_consume_token(RARROW);
    stms();
    jj_consume_token(OD);
  }

/*
fa	-> 'fa' id ':=' exp 'to' exp '->' stms 'af'
*/
  static final public void fa() throws ParseException {
  debug("fa()");
    jj_consume_token(FA);
    jj_consume_token(ID);
    jj_consume_token(ASSIGN);
    exp();
    jj_consume_token(TO);
    exp();
    jj_consume_token(RARROW);
    stms();
    jj_consume_token(AF);
  }

/*
proc	-> 'proc' id '(' declist ')'
		{type|var} {stm} 'end'
	-> 'proc' id '(' declist ')' ':' typeid 
		{type|var} {stm} 'end'
*/
  static final public void proc() throws ParseException {
  debug("proc()");
    jj_consume_token(PROC);
    jj_consume_token(ID);
    jj_consume_token(LPAREN);
    declist();
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      typeid();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case TYPE:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPE:
        type();
        break;
      case VAR:
        var();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURN:
      case READ:
      case WRITE:
      case WRITES:
      case IF:
      case DO:
      case FA:
      case BREAK:
      case EXIT:
      case TRUE:
      case FALSE:
      case ID:
      case INT:
      case STRING:
      case MINUS:
      case LPAREN:
      case QUESTION:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_6;
      }
      stm();
    }
    jj_consume_token(END);
  }

/*var	-> 'var' varlist
varlist  -> idlist ':' typeid { '[' int ']' } { ',' varlist}*/
  static final public void varlist() throws ParseException {
  debug("varlist()");
    idlist();
    jj_consume_token(COLON);
    typeid();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_7;
      }
      jj_consume_token(LBRACE);
      jj_consume_token(INT);
      jj_consume_token(RBRACE);
    }
    label_8:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(COMMA);
      varlist();
    }
  }

  static final public void var() throws ParseException {
  debug("var()");
    jj_consume_token(VAR);
    varlist();
  }

/*
forward -> 'forward' id '(' declist ')'
	-> 'forward' id '(' declist ')' ':' typeid
declist	-> idlist ':' typeid { ',' declist }
	->			# empty
*/
  static final public void declist() throws ParseException {
  debug("declist()");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      idlist();
      jj_consume_token(COLON);
      typeid();
      label_9:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_9;
        }
        jj_consume_token(COMMA);
        declist();
      }
      break;
    default:
      jj_la1[12] = jj_gen;

    }
  }

  static final public void forward() throws ParseException {
  debug("forward()");
    jj_consume_token(FORWARD);
    jj_consume_token(ID);
    jj_consume_token(LPAREN);
    declist();
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      typeid();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

/* type	-> 'type' id '=' typeid { '[' int ']' } */
  static final public void type() throws ParseException {
  debug("type()");
    jj_consume_token(TYPE);
    jj_consume_token(ID);
    jj_consume_token(EQUAL);
    typeid();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_10;
      }
      jj_consume_token(LBRACE);
      jj_consume_token(INT);
      jj_consume_token(RBRACE);
    }
  }

/*
lvalue	-> id | lvalue '[' exp ']'
*/
  static final public void lvalue() throws ParseException {
  debug("lvalue()");
    jj_consume_token(ID);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_11;
      }
      jj_consume_token(LBRACE);
      exp();
      jj_consume_token(RBRACE);
    }
  }

/*
exp	-> lvalue
	-> lvalue ':=' exp
	-> int				# integer literal
	-> 'true'			# boolean literal
	-> 'false'			# boolean literal
	-> string
	-> 'read'
	-> '-' exp
	-> '?' exp
	-> id '(' ')'			# procedure call
	-> id '(' exp { ',' exp } ')'	# procedure call
	-> exp '+' exp
	-> exp '-' exp
	-> exp '*' exp
	-> exp '/' exp
	-> exp '%' exp
	-> exp '=' exp
	-> exp '!=' exp
	-> exp '>' exp
	-> exp '<' exp
	-> exp '>=' exp
	-> exp '<=' exp
	-> '(' exp ')'
*/
  static final public String exp() throws ParseException {
  debug("exp()");
  Token k;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      k = jj_consume_token(INT);
      break;
    case TRUE:
      k = jj_consume_token(TRUE);
      break;
    case FALSE:
      k = jj_consume_token(FALSE);
      break;
    case STRING:
      k = jj_consume_token(STRING);
      break;
    case READ:
      k = jj_consume_token(READ);
      break;
    case MINUS:
      k = jj_consume_token(MINUS);
      break;
    case QUESTION:
      k = jj_consume_token(QUESTION);
      break;
    case LPAREN:
      k = jj_consume_token(LPAREN);
      exp();
      jj_consume_token(RPAREN);
      break;
    case ID:
      k = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case READ:
        case TRUE:
        case FALSE:
        case ID:
        case INT:
        case STRING:
        case MINUS:
        case LPAREN:
        case QUESTION:
          exp();
          label_12:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[16] = jj_gen;
              break label_12;
            }
            jj_consume_token(COMMA);
            exp();
          }
          break;
        default:
          jj_la1[17] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[20] = jj_gen;
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
            ;
            break;
          default:
            jj_la1[18] = jj_gen;
            break label_13;
          }
          jj_consume_token(LBRACE);
          exp();
          jj_consume_token(RBRACE);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          exp();
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_14:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_14;
      }
      op();
      exp();
    }
    debug(k.image);
    {if (true) return k.image;}
    throw new Error("Missing return statement in function");
  }

  static final public void exp2() throws ParseException {
  debug("exp2()");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case MULTIPLY:
    case DIVIDE:
    case MOD:
    case EQUAL:
    case NOTEQUAL:
    case GREATERTHAN:
    case LESSTHAN:
    case NOTLESSTHAN:
    case NOTGREATERTHAN:
      op();
      exp();
      exp2();
      break;
    default:
      jj_la1[22] = jj_gen;

    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(LR)) return true;
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_18()) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(LR)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public Ice9ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc180,0xc180,0x0,0x0,0xfca23c00,0xfca23c00,0xfca03c00,0x0,0x8080,0x8080,0xfca23c00,0x0,0x40000000,0x0,0x0,0x0,0x0,0xf0000800,0x0,0x0,0x0,0xf0000800,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x7ff0,0x20000,0xd00021,0xd00021,0xd00021,0x8000,0x0,0x0,0xd00021,0x40000,0x0,0x8000,0x40000,0x40000,0x20000,0x500021,0x40000,0x10000,0x100000,0x500021,0x7ff0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[5];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Ice9Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Ice9Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Ice9ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Ice9Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Ice9ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Ice9Parser(Ice9ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(Ice9ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

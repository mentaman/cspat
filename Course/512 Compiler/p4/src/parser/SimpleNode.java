/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package parser;

import java.util.ArrayList;

public class SimpleNode implements Node {

	protected Node parent;
	protected Node[] children;
	protected int id;
	protected Object value;
	protected Ice9Parser parser;
	protected Token token;
	protected ArrayList<Token> tokens = new ArrayList<Token>();
	public int constantValue;

	public boolean isConstant() {

		if (jjtGetNumChildren() == 0) {
			if (this instanceof ASTintTerm || this instanceof ASTboolTerm) {
				return true;
			}
			else
			{
				return false;
			}
		} else {

			for (int i = 0; i < jjtGetNumChildren(); i++) {
				SimpleNode child = (SimpleNode) jjtGetChild(i);
				if (!child.isConstant()) {
					return false;
				}
			}
		}
		return true;
	}

	public SimpleNode(int i) {
		id = i;
	}

	public SimpleNode(Ice9Parser p, int i) {
		this(i);
		parser = p;
	}

	public void setFirstToken(Token token) {
		if (tokens.size() > 0) {
			tokens.set(0, token);
		} else {
			tokens.add(token);
		}
	}

	public Token getFirstToken() {
		return tokens.get(0);
	}

	public void addToken(Token token) {
		tokens.add(token);
	}

	public Token getTokenAt(int index) {
		return tokens.get(index);
	}

	public int getTokenSize() {
		return tokens.size();
	}

	public ArrayList<Token> getTokens() {
		return tokens;
	}

	public void setTokens(ArrayList<Token> data) {
		tokens = data;
	}

	public void jjtOpen() {
	}

	public void jjtClose() {
	}

	public void jjtSetParent(Node n) {
		parent = n;
	}

	public Node jjtGetParent() {
		return parent;
	}

	public void jjtAddChild(Node n, int i) {
		if (children == null) {
			children = new Node[i + 1];
		} else if (i >= children.length) {
			Node c[] = new Node[i + 1];
			System.arraycopy(children, 0, c, 0, children.length);
			children = c;
		}
		children[i] = n;
	}

	public Node jjtGetChild(int i) {
		return children[i];
	}

	public int jjtGetNumChildren() {
		return (children == null) ? 0 : children.length;
	}

	public void jjtSetValue(Object value) {
		this.value = value;
	}

	public Object jjtGetValue() {
		return value;
	}

	/** Accept the visitor. **/
	public Object jjtAccept(Ice9ParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	/** Accept the visitor. **/
	public Object childrenAccept(Ice9ParserVisitor visitor, Object data) {
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				children[i].jjtAccept(visitor, data);
			}
		}
		return data;
	}

	/*
	 * You can override these two methods in subclasses of SimpleNode to
	 * customize the way the node appears when the tree is dumped. If your
	 * output uses more than one line you should override toString(String),
	 * otherwise overriding toString() is probably all you need to do.
	 */

	public String toString() {
		return Ice9ParserTreeConstants.jjtNodeName[id];
	}

	public String toString(String prefix) {
		return prefix + toString();
	}

	/*
	 * Override this method if you want to customize how the node dumps out its
	 * children.
	 */

	public void dump(String prefix) {
		System.out.println(toString(prefix) + " type: " + value);
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
					n.dump(prefix + " ");
				}
			}
		}
	}

	public void jjtDeleteChild(Node n) {
		int i;
		int j = 0;
		int position = 0;
		Node[] c = new Node[children.length - 1];
		for (i = 0; i < children.length; i++) {
			if (children[i] == n)
				continue;
			c[j++] = children[i];

		}
		children = c;

	}

	public void jjtReplaceNode(SimpleNode oldNo, SimpleNode newNo) {
		for (int i = 0; i < children.length; i++) {
			if (children[i] == oldNo) {
				children[i] = newNo;
				return;
			}
		}
	}
	
	public void jjtClearChildren(){
		children = null;
	}
	
}

/*
 * JavaCC - OriginalChecksum=888e988af0c310ff11f578a34f74289c (do not edit this
 * line)
 */

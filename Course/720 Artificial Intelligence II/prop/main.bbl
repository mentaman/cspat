\begin{thebibliography}{10}

\bibitem{online}
G.~K. Baah, A.~Gray, and M.~J. Harrold.
\newblock On-line anomaly detection of deployed software: A statistical machine
  learning approach.
\newblock In {\em Proceedings of theThird International Workshop on Software
  Quality Assurance (SOQUA 2006)}, pages 70--77, Portland, Oregon, November
  2006.

\bibitem{prune}
S.~Bardin and P.~Herrmann.
\newblock {Pruning the Search Space in Path-Based Test Generation}.
\newblock In {\em ICST}, 2009.

\bibitem{mlinstatistics}
N.~Baskiotis, M.~Sebag, M.-C. Gaudel, and S.~Gouraud.
\newblock A machine learning approach for statistical software testing.
\newblock In {\em Proceedings of the 20th international joint conference on
  Artifical intelligence}, pages 2274--2279, San Francisco, CA, USA, 2007.
  Morgan Kaufmann Publishers Inc.

\bibitem{predictCoverage}
B.~Daniel and M.~Boshernitsan.
\newblock Predicting effectiveness of automatic testing tools.
\newblock In {\em IEEE/ACM International Conference on Automated Software
  Engineering (ASE)}. IEEE, September 2008.

\bibitem{repair}
S.~Forrest, T.~Nguyen, W.~Weimer, and C.~Le~Goues.
\newblock A genetic programming approach to automated software repair.
\newblock In {\em Proceedings of the 11th Annual conference on Genetic and
  evolutionary computation}, GECCO '09, pages 947--954, New York, NY, USA,
  2009. ACM.

\bibitem{dart}
P.~Godefroid, N.~Klarlund, and K.~Sen.
\newblock Dart: directed automated random testing.
\newblock In {\em PLDI}, pages 213--223, 2005.

\bibitem{symbolic}
J.~C. King.
\newblock Symbolic execution and program testing.
\newblock {\em Commun. ACM}, 19(7):385--394, 1976.

\bibitem{evolutionaryComputation}
E.~Schulte, S.~Forrest, and W.~Weimer.
\newblock Automated program repair through the evolution of assembly code.
\newblock In {\em Proceedings of the IEEE/ACM international conference on
  Automated software engineering}, ASE '10, pages 313--316, New York, NY, USA,
  2010. ACM.

\bibitem{cute}
K.~Sen, D.~Marinov, and G.~Agha.
\newblock Cute: a concolic unit testing engine for c.
\newblock In {\em ESEC/FSE-13: Proceedings of the 10th European software
  engineering conference held jointly with 13th ACM SIGSOFT international
  symposium on Foundations of software engineering}, pages 263--272, New York,
  NY, USA, 2005. ACM.

\bibitem{wrongDefinition}
Y.~Shi, S.~Park, Z.~Yin, S.~Lu, Y.~Zhou, W.~Chen, and W.~Zheng.
\newblock Do i use the wrong definition?: Defuse: definition-use invariants for
  detecting concurrency and sequential bugs.
\newblock In {\em Proceedings of the ACM international conference on Object
  oriented programming systems languages and applications}, OOPSLA '10, pages
  160--174, New York, NY, USA, 2010. ACM.

\bibitem{geneticPatch}
W.~Weimer, T.~Nguyen, C.~L. Goues, and S.~Forrest.
\newblock Automatically finding patches using genetic programming.
\newblock {\em Software Engineering, International Conference on}, 0:364--374,
  2009.

\bibitem{fitness}
T.~Xie, N.~Tillmann, P.~de~Halleux, and W.~Schulte.
\newblock Fitness-guided path exploration in dynamic symbolic execution.
\newblock In {\em Proc. the 39th Annual IEEE/IFIP International Conference on
  Dependable Systems and Networks (DSN 2009)}, June-July 2009.

\bibitem{constraintsolving}
J.~Zhang.
\newblock Constraint solving and symbolic execution.
\newblock {\em Verified Software: Theories, Tools, Experiments: First IFIP TC
  2/WG 2.3 Conference, VSTTE 2005, Zurich, Switzerland, October 10-13, 2005,
  Revised Selected Papers and Discussions}, pages 539--544, 2008.

\end{thebibliography}
